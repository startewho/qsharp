/* automatically generated by csbindgen */

#[allow(unused)]
use ::std::os::raw::*;

use super::quickjs::*;


#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetwc(
    _Stream: *mut FILE
) -> wint_t
{
    fgetwc(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fputwc(
    _Character: wchar_t,
    _Stream: *mut FILE
) -> wint_t
{
    fputwc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getwc(
    _Stream: *mut FILE
) -> wint_t
{
    getwc(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getwchar(

) -> wint_t
{
    getwchar(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetws(
    _Buffer: *mut wchar_t,
    _BufferCount: c_int,
    _Stream: *mut FILE
) -> *mut wchar_t
{
    fgetws(
        _Buffer,
        _BufferCount,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fputws(
    _Buffer: *const wchar_t,
    _Stream: *mut FILE
) -> c_int
{
    fputws(
        _Buffer,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putwc(
    _Character: wchar_t,
    _Stream: *mut FILE
) -> wint_t
{
    putwc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putwchar(
    _Character: wchar_t
) -> wint_t
{
    putwchar(
        _Character
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ungetwc(
    _Character: wint_t,
    _Stream: *mut FILE
) -> wint_t
{
    ungetwc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_clearerr_s(
    _Stream: *mut FILE
) -> errno_t
{
    clearerr_s(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fopen_s(
    _Stream: *mut *mut FILE,
    _FileName: *const c_char,
    _Mode: *const c_char
) -> errno_t
{
    fopen_s(
        _Stream,
        _FileName,
        _Mode
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fread_s(
    _Buffer: *mut c_void,
    _BufferSize: usize,
    _ElementSize: usize,
    _ElementCount: usize,
    _Stream: *mut FILE
) -> usize
{
    fread_s(
        _Buffer,
        _BufferSize,
        _ElementSize,
        _ElementCount,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_freopen_s(
    _Stream: *mut *mut FILE,
    _FileName: *const c_char,
    _Mode: *const c_char,
    _OldStream: *mut FILE
) -> errno_t
{
    freopen_s(
        _Stream,
        _FileName,
        _Mode,
        _OldStream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_gets_s(
    _Buffer: *mut c_char,
    _Size: rsize_t
) -> *mut c_char
{
    gets_s(
        _Buffer,
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tmpfile_s(
    _Stream: *mut *mut FILE
) -> errno_t
{
    tmpfile_s(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tmpnam_s(
    _Buffer: *mut c_char,
    _Size: rsize_t
) -> errno_t
{
    tmpnam_s(
        _Buffer,
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_clearerr(
    _Stream: *mut FILE
)
{
    clearerr(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fclose(
    _Stream: *mut FILE
) -> c_int
{
    fclose(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_feof(
    _Stream: *mut FILE
) -> c_int
{
    feof(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ferror(
    _Stream: *mut FILE
) -> c_int
{
    ferror(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fflush(
    _Stream: *mut FILE
) -> c_int
{
    fflush(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetc(
    _Stream: *mut FILE
) -> c_int
{
    fgetc(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetpos(
    _Stream: *mut FILE,
    _Position: *mut fpos_t
) -> c_int
{
    fgetpos(
        _Stream,
        _Position
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgets(
    _Buffer: *mut c_char,
    _MaxCount: c_int,
    _Stream: *mut FILE
) -> *mut c_char
{
    fgets(
        _Buffer,
        _MaxCount,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fopen(
    _FileName: *const c_char,
    _Mode: *const c_char
) -> *mut FILE
{
    fopen(
        _FileName,
        _Mode
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fputc(
    _Character: c_int,
    _Stream: *mut FILE
) -> c_int
{
    fputc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fputs(
    _Buffer: *const c_char,
    _Stream: *mut FILE
) -> c_int
{
    fputs(
        _Buffer,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fread(
    _Buffer: *mut c_void,
    _ElementSize: c_ulonglong,
    _ElementCount: c_ulonglong,
    _Stream: *mut FILE
) -> c_ulonglong
{
    fread(
        _Buffer,
        _ElementSize,
        _ElementCount,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_freopen(
    _FileName: *const c_char,
    _Mode: *const c_char,
    _Stream: *mut FILE
) -> *mut FILE
{
    freopen(
        _FileName,
        _Mode,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fsetpos(
    _Stream: *mut FILE,
    _Position: *const fpos_t
) -> c_int
{
    fsetpos(
        _Stream,
        _Position
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fseek(
    _Stream: *mut FILE,
    _Offset: c_long,
    _Origin: c_int
) -> c_int
{
    fseek(
        _Stream,
        _Offset,
        _Origin
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ftell(
    _Stream: *mut FILE
) -> c_long
{
    ftell(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fwrite(
    _Buffer: *const c_void,
    _ElementSize: c_ulonglong,
    _ElementCount: c_ulonglong,
    _Stream: *mut FILE
) -> c_ulonglong
{
    fwrite(
        _Buffer,
        _ElementSize,
        _ElementCount,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getc(
    _Stream: *mut FILE
) -> c_int
{
    getc(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getchar(

) -> c_int
{
    getchar(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_perror(
    _ErrorMessage: *const c_char
)
{
    perror(
        _ErrorMessage
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putc(
    _Character: c_int,
    _Stream: *mut FILE
) -> c_int
{
    putc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putchar(
    _Character: c_int
) -> c_int
{
    putchar(
        _Character
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_puts(
    _Buffer: *const c_char
) -> c_int
{
    puts(
        _Buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_remove(
    _FileName: *const c_char
) -> c_int
{
    remove(
        _FileName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rename(
    _OldFileName: *const c_char,
    _NewFileName: *const c_char
) -> c_int
{
    rename(
        _OldFileName,
        _NewFileName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_unlink(
    _FileName: *const c_char
) -> c_int
{
    unlink(
        _FileName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rewind(
    _Stream: *mut FILE
)
{
    rewind(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_setbuf(
    _Stream: *mut FILE,
    _Buffer: *mut c_char
)
{
    setbuf(
        _Stream,
        _Buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_setvbuf(
    _Stream: *mut FILE,
    _Buffer: *mut c_char,
    _Mode: c_int,
    _Size: usize
) -> c_int
{
    setvbuf(
        _Stream,
        _Buffer,
        _Mode,
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tmpfile(

) -> *mut FILE
{
    tmpfile(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tmpnam(
    _Buffer: *mut c_char
) -> *mut c_char
{
    tmpnam(
        _Buffer
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ungetc(
    _Character: c_int,
    _Stream: *mut FILE
) -> c_int
{
    ungetc(
        _Character,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tempnam(
    _Directory: *const c_char,
    _FilePrefix: *const c_char
) -> *mut c_char
{
    tempnam(
        _Directory,
        _FilePrefix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fcloseall(

) -> c_int
{
    fcloseall(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fdopen(
    _FileHandle: c_int,
    _Format: *const c_char
) -> *mut FILE
{
    fdopen(
        _FileHandle,
        _Format
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fgetchar(

) -> c_int
{
    fgetchar(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fileno(
    _Stream: *mut FILE
) -> c_int
{
    fileno(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_flushall(

) -> c_int
{
    flushall(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fputchar(
    _Ch: c_int
) -> c_int
{
    fputchar(
        _Ch
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getw(
    _Stream: *mut FILE
) -> c_int
{
    getw(
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putw(
    _Ch: c_int,
    _Stream: *mut FILE
) -> c_int
{
    putw(
        _Ch,
        _Stream
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rmtmp(

) -> c_int
{
    rmtmp(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_calloc(
    _Count: c_ulonglong,
    _Size: c_ulonglong
) -> *mut c_void
{
    calloc(
        _Count,
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_free(
    _Block: *mut c_void
)
{
    free(
        _Block
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_malloc(
    _Size: c_ulonglong
) -> *mut c_void
{
    malloc(
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_realloc(
    _Block: *mut c_void,
    _Size: c_ulonglong
) -> *mut c_void
{
    realloc(
        _Block,
        _Size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_bsearch_s(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements: rsize_t,
    _SizeOfElements: rsize_t,
    _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
    _Context: *mut c_void
) -> *mut c_void
{
    bsearch_s(
        _Key,
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction,
        _Context
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qsort_s(
    _Base: *mut c_void,
    _NumOfElements: rsize_t,
    _SizeOfElements: rsize_t,
    _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
    _Context: *mut c_void
)
{
    qsort_s(
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction,
        _Context
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_bsearch(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements: usize,
    _SizeOfElements: usize,
    _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction
) -> *mut c_void
{
    bsearch(
        _Key,
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_qsort(
    _Base: *mut c_void,
    _NumOfElements: usize,
    _SizeOfElements: usize,
    _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction
)
{
    qsort(
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lfind(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements: *mut c_uint,
    _SizeOfElements: c_uint,
    _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction
) -> *mut c_void
{
    lfind(
        _Key,
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lsearch(
    _Key: *const c_void,
    _Base: *mut c_void,
    _NumOfElements: *mut c_uint,
    _SizeOfElements: c_uint,
    _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction
) -> *mut c_void
{
    lsearch(
        _Key,
        _Base,
        _NumOfElements,
        _SizeOfElements,
        _CompareFunction
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstod(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t
) -> f64
{
    wcstod(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstol(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix: c_int
) -> c_long
{
    wcstol(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstoll(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix: c_int
) -> c_longlong
{
    wcstoll(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstoul(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix: c_int
) -> c_ulong
{
    wcstoul(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstoull(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix: c_int
) -> c_ulonglong
{
    wcstoull(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstold(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t
) -> f64
{
    wcstold(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstof(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t
) -> f32
{
    wcstof(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atexit(
    arg1: Option<unsafe extern "C" fn()>
) -> c_int
{
    atexit(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_at_quick_exit(
    arg1: Option<unsafe extern "C" fn()>
) -> c_int
{
    at_quick_exit(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_abs(
    _Number: c_int
) -> c_int
{
    abs(
        _Number
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_labs(
    _Number: c_long
) -> c_long
{
    labs(
        _Number
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_llabs(
    _Number: c_longlong
) -> c_longlong
{
    llabs(
        _Number
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_div(
    _Numerator: c_int,
    _Denominator: c_int
) -> div_t
{
    div(
        _Numerator,
        _Denominator
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ldiv(
    _Numerator: c_long,
    _Denominator: c_long
) -> ldiv_t
{
    ldiv(
        _Numerator,
        _Denominator
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lldiv(
    _Numerator: c_longlong,
    _Denominator: c_longlong
) -> lldiv_t
{
    lldiv(
        _Numerator,
        _Denominator
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_srand(
    _Seed: c_uint
)
{
    srand(
        _Seed
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rand(

) -> c_int
{
    rand(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atof(
    _String: *const c_char
) -> f64
{
    atof(
        _String
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atoi(
    _String: *const c_char
) -> c_int
{
    atoi(
        _String
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atol(
    _String: *const c_char
) -> c_long
{
    atol(
        _String
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atoll(
    _String: *const c_char
) -> c_longlong
{
    atoll(
        _String
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtof(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char
) -> f32
{
    strtof(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtod(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char
) -> f64
{
    strtod(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtold(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char
) -> f64
{
    strtold(
        _String,
        _EndPtr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtol(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix: c_int
) -> c_long
{
    strtol(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoll(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix: c_int
) -> c_longlong
{
    strtoll(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoul(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix: c_int
) -> c_ulong
{
    strtoul(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_strtoull(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix: c_int
) -> c_ulonglong
{
    strtoull(
        _String,
        _EndPtr,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mblen(
    _Ch: *const c_char,
    _MaxCount: usize
) -> c_int
{
    mblen(
        _Ch,
        _MaxCount
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mbtowc(
    _DstCh: *mut wchar_t,
    _SrcCh: *const c_char,
    _SrcSizeInBytes: usize
) -> c_int
{
    mbtowc(
        _DstCh,
        _SrcCh,
        _SrcSizeInBytes
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mbstowcs_s(
    _PtNumOfCharConverted: *mut usize,
    _DstBuf: *mut wchar_t,
    _SizeInWords: usize,
    _SrcBuf: *const c_char,
    _MaxCount: usize
) -> errno_t
{
    mbstowcs_s(
        _PtNumOfCharConverted,
        _DstBuf,
        _SizeInWords,
        _SrcBuf,
        _MaxCount
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_mbstowcs(
    _Dest: *mut wchar_t,
    _Source: *const c_char,
    _MaxCount: usize
) -> usize
{
    mbstowcs(
        _Dest,
        _Source,
        _MaxCount
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wctomb(
    _MbCh: *mut c_char,
    _WCh: wchar_t
) -> c_int
{
    wctomb(
        _MbCh,
        _WCh
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wctomb_s(
    _SizeConverted: *mut c_int,
    _MbCh: *mut c_char,
    _SizeInBytes: rsize_t,
    _WCh: wchar_t
) -> errno_t
{
    wctomb_s(
        _SizeConverted,
        _MbCh,
        _SizeInBytes,
        _WCh
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstombs_s(
    _PtNumOfCharConverted: *mut usize,
    _Dst: *mut c_char,
    _DstSizeInBytes: usize,
    _Src: *const wchar_t,
    _MaxCountInBytes: usize
) -> errno_t
{
    wcstombs_s(
        _PtNumOfCharConverted,
        _Dst,
        _DstSizeInBytes,
        _Src,
        _MaxCountInBytes
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_wcstombs(
    _Dest: *mut c_char,
    _Source: *const wchar_t,
    _MaxCount: usize
) -> usize
{
    wcstombs(
        _Dest,
        _Source,
        _MaxCount
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getenv_s(
    _RequiredCount: *mut usize,
    _Buffer: *mut c_char,
    _BufferCount: rsize_t,
    _VarName: *const c_char
) -> errno_t
{
    getenv_s(
        _RequiredCount,
        _Buffer,
        _BufferCount,
        _VarName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_getenv(
    _VarName: *const c_char
) -> *mut c_char
{
    getenv(
        _VarName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_system(
    _Command: *const c_char
) -> c_int
{
    system(
        _Command
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ecvt(
    _Value: f64,
    _DigitCount: c_int,
    _PtDec: *mut c_int,
    _PtSign: *mut c_int
) -> *mut c_char
{
    ecvt(
        _Value,
        _DigitCount,
        _PtDec,
        _PtSign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fcvt(
    _Value: f64,
    _FractionalDigitCount: c_int,
    _PtDec: *mut c_int,
    _PtSign: *mut c_int
) -> *mut c_char
{
    fcvt(
        _Value,
        _FractionalDigitCount,
        _PtDec,
        _PtSign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_gcvt(
    _Value: f64,
    _DigitCount: c_int,
    _DstBuf: *mut c_char
) -> *mut c_char
{
    gcvt(
        _Value,
        _DigitCount,
        _DstBuf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_itoa(
    _Value: c_int,
    _Buffer: *mut c_char,
    _Radix: c_int
) -> *mut c_char
{
    itoa(
        _Value,
        _Buffer,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ltoa(
    _Value: c_long,
    _Buffer: *mut c_char,
    _Radix: c_int
) -> *mut c_char
{
    ltoa(
        _Value,
        _Buffer,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_swab(
    _Buf1: *mut c_char,
    _Buf2: *mut c_char,
    _SizeInBytes: c_int
)
{
    swab(
        _Buf1,
        _Buf2,
        _SizeInBytes
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ultoa(
    _Value: c_ulong,
    _Buffer: *mut c_char,
    _Radix: c_int
) -> *mut c_char
{
    ultoa(
        _Value,
        _Buffer,
        _Radix
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_putenv(
    _EnvString: *const c_char
) -> c_int
{
    putenv(
        _EnvString
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_onexit(
    _Func: _onexit_t
) -> _onexit_t
{
    onexit(
        _Func
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_acos(
    _X: f64
) -> f64
{
    acos(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_asin(
    _X: f64
) -> f64
{
    asin(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atan(
    _X: f64
) -> f64
{
    atan(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atan2(
    _Y: f64,
    _X: f64
) -> f64
{
    atan2(
        _Y,
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_cos(
    _X: f64
) -> f64
{
    cos(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_cosh(
    _X: f64
) -> f64
{
    cosh(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_exp(
    _X: f64
) -> f64
{
    exp(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fabs(
    _X: f64
) -> f64
{
    fabs(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fmod(
    _X: f64,
    _Y: f64
) -> f64
{
    fmod(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_log(
    _X: f64
) -> f64
{
    log(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_log10(
    _X: f64
) -> f64
{
    log10(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_pow(
    _X: f64,
    _Y: f64
) -> f64
{
    pow(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sin(
    _X: f64
) -> f64
{
    sin(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sinh(
    _X: f64
) -> f64
{
    sinh(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqrt(
    _X: f64
) -> f64
{
    sqrt(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tan(
    _X: f64
) -> f64
{
    tan(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tanh(
    _X: f64
) -> f64
{
    tanh(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_acosh(
    _X: f64
) -> f64
{
    acosh(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_asinh(
    _X: f64
) -> f64
{
    asinh(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atanh(
    _X: f64
) -> f64
{
    atanh(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_cbrt(
    _X: f64
) -> f64
{
    cbrt(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ceil(
    _X: f64
) -> f64
{
    ceil(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_copysign(
    _Number: f64,
    _Sign: f64
) -> f64
{
    copysign(
        _Number,
        _Sign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_erf(
    _X: f64
) -> f64
{
    erf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_erfc(
    _X: f64
) -> f64
{
    erfc(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_exp2(
    _X: f64
) -> f64
{
    exp2(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_expm1(
    _X: f64
) -> f64
{
    expm1(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fdim(
    _X: f64,
    _Y: f64
) -> f64
{
    fdim(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_floor(
    _X: f64
) -> f64
{
    floor(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fma(
    _X: f64,
    _Y: f64,
    _Z: f64
) -> f64
{
    fma(
        _X,
        _Y,
        _Z
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fmax(
    _X: f64,
    _Y: f64
) -> f64
{
    fmax(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fmin(
    _X: f64,
    _Y: f64
) -> f64
{
    fmin(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_frexp(
    _X: f64,
    _Y: *mut c_int
) -> f64
{
    frexp(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_hypot(
    _X: f64,
    _Y: f64
) -> f64
{
    hypot(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ilogb(
    _X: f64
) -> c_int
{
    ilogb(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ldexp(
    _X: f64,
    _Y: c_int
) -> f64
{
    ldexp(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lgamma(
    _X: f64
) -> f64
{
    lgamma(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_llrint(
    _X: f64
) -> c_longlong
{
    llrint(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_llround(
    _X: f64
) -> c_longlong
{
    llround(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_log1p(
    _X: f64
) -> f64
{
    log1p(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_log2(
    _X: f64
) -> f64
{
    log2(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_logb(
    _X: f64
) -> f64
{
    logb(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lrint(
    _X: f64
) -> c_long
{
    lrint(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lround(
    _X: f64
) -> c_long
{
    lround(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_modf(
    _X: f64,
    _Y: *mut f64
) -> f64
{
    modf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nan(
    _X: *const c_char
) -> f64
{
    nan(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nearbyint(
    _X: f64
) -> f64
{
    nearbyint(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nextafter(
    _X: f64,
    _Y: f64
) -> f64
{
    nextafter(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nexttoward(
    _X: f64,
    _Y: f64
) -> f64
{
    nexttoward(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_remainder(
    _X: f64,
    _Y: f64
) -> f64
{
    remainder(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_remquo(
    _X: f64,
    _Y: f64,
    _Z: *mut c_int
) -> f64
{
    remquo(
        _X,
        _Y,
        _Z
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rint(
    _X: f64
) -> f64
{
    rint(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_round(
    _X: f64
) -> f64
{
    round(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_scalbln(
    _X: f64,
    _Y: c_long
) -> f64
{
    scalbln(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_scalbn(
    _X: f64,
    _Y: c_int
) -> f64
{
    scalbn(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tgamma(
    _X: f64
) -> f64
{
    tgamma(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_trunc(
    _X: f64
) -> f64
{
    trunc(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_acoshf(
    _X: f32
) -> f32
{
    acoshf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_asinhf(
    _X: f32
) -> f32
{
    asinhf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atanhf(
    _X: f32
) -> f32
{
    atanhf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_cbrtf(
    _X: f32
) -> f32
{
    cbrtf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_copysignf(
    _Number: f32,
    _Sign: f32
) -> f32
{
    copysignf(
        _Number,
        _Sign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_erff(
    _X: f32
) -> f32
{
    erff(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_erfcf(
    _X: f32
) -> f32
{
    erfcf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_expm1f(
    _X: f32
) -> f32
{
    expm1f(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_exp2f(
    _X: f32
) -> f32
{
    exp2f(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fdimf(
    _X: f32,
    _Y: f32
) -> f32
{
    fdimf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fmaf(
    _X: f32,
    _Y: f32,
    _Z: f32
) -> f32
{
    fmaf(
        _X,
        _Y,
        _Z
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fmaxf(
    _X: f32,
    _Y: f32
) -> f32
{
    fmaxf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fminf(
    _X: f32,
    _Y: f32
) -> f32
{
    fminf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ilogbf(
    _X: f32
) -> c_int
{
    ilogbf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lgammaf(
    _X: f32
) -> f32
{
    lgammaf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_llrintf(
    _X: f32
) -> c_longlong
{
    llrintf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_llroundf(
    _X: f32
) -> c_longlong
{
    llroundf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_log1pf(
    _X: f32
) -> f32
{
    log1pf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_log2f(
    _X: f32
) -> f32
{
    log2f(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_logbf(
    _X: f32
) -> f32
{
    logbf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lrintf(
    _X: f32
) -> c_long
{
    lrintf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lroundf(
    _X: f32
) -> c_long
{
    lroundf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nanf(
    _X: *const c_char
) -> f32
{
    nanf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nearbyintf(
    _X: f32
) -> f32
{
    nearbyintf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nextafterf(
    _X: f32,
    _Y: f32
) -> f32
{
    nextafterf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nexttowardf(
    _X: f32,
    _Y: f64
) -> f32
{
    nexttowardf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_remainderf(
    _X: f32,
    _Y: f32
) -> f32
{
    remainderf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_remquof(
    _X: f32,
    _Y: f32,
    _Z: *mut c_int
) -> f32
{
    remquof(
        _X,
        _Y,
        _Z
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rintf(
    _X: f32
) -> f32
{
    rintf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_roundf(
    _X: f32
) -> f32
{
    roundf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_scalblnf(
    _X: f32,
    _Y: c_long
) -> f32
{
    scalblnf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_scalbnf(
    _X: f32,
    _Y: c_int
) -> f32
{
    scalbnf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tgammaf(
    _X: f32
) -> f32
{
    tgammaf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_truncf(
    _X: f32
) -> f32
{
    truncf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_acosf(
    _X: f32
) -> f32
{
    acosf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_asinf(
    _X: f32
) -> f32
{
    asinf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atan2f(
    _Y: f32,
    _X: f32
) -> f32
{
    atan2f(
        _Y,
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atanf(
    _X: f32
) -> f32
{
    atanf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ceilf(
    _X: f32
) -> f32
{
    ceilf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_cosf(
    _X: f32
) -> f32
{
    cosf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_coshf(
    _X: f32
) -> f32
{
    coshf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_expf(
    _X: f32
) -> f32
{
    expf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_floorf(
    _X: f32
) -> f32
{
    floorf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fmodf(
    _X: f32,
    _Y: f32
) -> f32
{
    fmodf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_log10f(
    _X: f32
) -> f32
{
    log10f(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_logf(
    _X: f32
) -> f32
{
    logf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_modff(
    _X: f32,
    _Y: *mut f32
) -> f32
{
    modff(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_powf(
    _X: f32,
    _Y: f32
) -> f32
{
    powf(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sinf(
    _X: f32
) -> f32
{
    sinf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sinhf(
    _X: f32
) -> f32
{
    sinhf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqrtf(
    _X: f32
) -> f32
{
    sqrtf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tanf(
    _X: f32
) -> f32
{
    tanf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tanhf(
    _X: f32
) -> f32
{
    tanhf(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_acoshl(
    _X: f64
) -> f64
{
    acoshl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_asinhl(
    _X: f64
) -> f64
{
    asinhl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_atanhl(
    _X: f64
) -> f64
{
    atanhl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_cbrtl(
    _X: f64
) -> f64
{
    cbrtl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_copysignl(
    _Number: f64,
    _Sign: f64
) -> f64
{
    copysignl(
        _Number,
        _Sign
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_erfl(
    _X: f64
) -> f64
{
    erfl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_erfcl(
    _X: f64
) -> f64
{
    erfcl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_exp2l(
    _X: f64
) -> f64
{
    exp2l(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_expm1l(
    _X: f64
) -> f64
{
    expm1l(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fdiml(
    _X: f64,
    _Y: f64
) -> f64
{
    fdiml(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fmal(
    _X: f64,
    _Y: f64,
    _Z: f64
) -> f64
{
    fmal(
        _X,
        _Y,
        _Z
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fmaxl(
    _X: f64,
    _Y: f64
) -> f64
{
    fmaxl(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_fminl(
    _X: f64,
    _Y: f64
) -> f64
{
    fminl(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_ilogbl(
    _X: f64
) -> c_int
{
    ilogbl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lgammal(
    _X: f64
) -> f64
{
    lgammal(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_llrintl(
    _X: f64
) -> c_longlong
{
    llrintl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_llroundl(
    _X: f64
) -> c_longlong
{
    llroundl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_log1pl(
    _X: f64
) -> f64
{
    log1pl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_log2l(
    _X: f64
) -> f64
{
    log2l(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_logbl(
    _X: f64
) -> f64
{
    logbl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lrintl(
    _X: f64
) -> c_long
{
    lrintl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_lroundl(
    _X: f64
) -> c_long
{
    lroundl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nanl(
    _X: *const c_char
) -> f64
{
    nanl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nearbyintl(
    _X: f64
) -> f64
{
    nearbyintl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nextafterl(
    _X: f64,
    _Y: f64
) -> f64
{
    nextafterl(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_nexttowardl(
    _X: f64,
    _Y: f64
) -> f64
{
    nexttowardl(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_remainderl(
    _X: f64,
    _Y: f64
) -> f64
{
    remainderl(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_remquol(
    _X: f64,
    _Y: f64,
    _Z: *mut c_int
) -> f64
{
    remquol(
        _X,
        _Y,
        _Z
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_rintl(
    _X: f64
) -> f64
{
    rintl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_roundl(
    _X: f64
) -> f64
{
    roundl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_scalblnl(
    _X: f64,
    _Y: c_long
) -> f64
{
    scalblnl(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_scalbnl(
    _X: f64,
    _Y: c_int
) -> f64
{
    scalbnl(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_tgammal(
    _X: f64
) -> f64
{
    tgammal(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_truncl(
    _X: f64
) -> f64
{
    truncl(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_j0(
    _X: f64
) -> f64
{
    j0(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_j1(
    _X: f64
) -> f64
{
    j1(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_jn(
    _X: c_int,
    _Y: f64
) -> f64
{
    jn(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_y0(
    _X: f64
) -> f64
{
    y0(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_y1(
    _X: f64
) -> f64
{
    y1(
        _X
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_yn(
    _X: c_int,
    _Y: f64
) -> f64
{
    yn(
        _X,
        _Y
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewRuntime(

) -> *mut JSRuntime
{
    JS_NewRuntime(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetRuntimeInfo(
    rt: *mut JSRuntime,
    info: *const c_char
)
{
    JS_SetRuntimeInfo(
        rt,
        info
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetMemoryLimit(
    rt: *mut JSRuntime,
    limit: usize
)
{
    JS_SetMemoryLimit(
        rt,
        limit
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetGCThreshold(
    rt: *mut JSRuntime,
    gc_threshold: usize
)
{
    JS_SetGCThreshold(
        rt,
        gc_threshold
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetMaxStackSize(
    rt: *mut JSRuntime,
    stack_size: usize
)
{
    JS_SetMaxStackSize(
        rt,
        stack_size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_UpdateStackTop(
    rt: *mut JSRuntime
)
{
    JS_UpdateStackTop(
        rt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewRuntime2(
    mf: *const JSMallocFunctions,
    opaque: *mut c_void
) -> *mut JSRuntime
{
    JS_NewRuntime2(
        mf,
        opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_FreeRuntime(
    rt: *mut JSRuntime
)
{
    JS_FreeRuntime(
        rt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetRuntimeOpaque(
    rt: *mut JSRuntime
) -> *mut c_void
{
    JS_GetRuntimeOpaque(
        rt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetRuntimeOpaque(
    rt: *mut JSRuntime,
    opaque: *mut c_void
)
{
    JS_SetRuntimeOpaque(
        rt,
        opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_MarkValue(
    rt: *mut JSRuntime,
    val: JSValue,
    mark_func: JS_MarkFunc
)
{
    JS_MarkValue(
        rt,
        val,
        mark_func
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_RunGC(
    rt: *mut JSRuntime
)
{
    JS_RunGC(
        rt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsLiveObject(
    rt: *mut JSRuntime,
    obj: JSValue
) -> c_int
{
    JS_IsLiveObject(
        rt,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewContext(
    rt: *mut JSRuntime
) -> *mut JSContext
{
    JS_NewContext(
        rt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_FreeContext(
    s: *mut JSContext
)
{
    JS_FreeContext(
        s
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DupContext(
    ctx: *mut JSContext
) -> *mut JSContext
{
    JS_DupContext(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetContextOpaque(
    ctx: *mut JSContext
) -> *mut c_void
{
    JS_GetContextOpaque(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetContextOpaque(
    ctx: *mut JSContext,
    opaque: *mut c_void
)
{
    JS_SetContextOpaque(
        ctx,
        opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetRuntime(
    ctx: *mut JSContext
) -> *mut JSRuntime
{
    JS_GetRuntime(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetClassProto(
    ctx: *mut JSContext,
    class_id: JSClassID,
    obj: JSValue
)
{
    JS_SetClassProto(
        ctx,
        class_id,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetClassProto(
    ctx: *mut JSContext,
    class_id: JSClassID
) -> JSValue
{
    JS_GetClassProto(
        ctx,
        class_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetClassName(
    ctx: *mut JSContext,
    class_id: JSClassID
) -> JSValue
{
    JS_GetClassName(
        ctx,
        class_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewContextRaw(
    rt: *mut JSRuntime
) -> *mut JSContext
{
    JS_NewContextRaw(
        rt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicBaseObjects(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicBaseObjects(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicDate(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicDate(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicEval(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicEval(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicStringNormalize(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicStringNormalize(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicRegExpCompiler(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicRegExpCompiler(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicRegExp(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicRegExp(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicJSON(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicJSON(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicProxy(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicProxy(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicMapSet(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicMapSet(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicTypedArrays(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicTypedArrays(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicPromise(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicPromise(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicBigInt(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicBigInt(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicBigFloat(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicBigFloat(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicBigDecimal(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicBigDecimal(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddIntrinsicOperators(
    ctx: *mut JSContext
)
{
    JS_AddIntrinsicOperators(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_EnableBignumExt(
    ctx: *mut JSContext,
    enable: c_int
)
{
    JS_EnableBignumExt(
        ctx,
        enable
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_string_codePointRange(
    ctx: *mut JSContext,
    this_val: JSValue,
    argc: c_int,
    argv: *mut JSValue
) -> JSValue
{
    js_string_codePointRange(
        ctx,
        this_val,
        argc,
        argv
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_malloc_rt(
    rt: *mut JSRuntime,
    size: usize
) -> *mut c_void
{
    js_malloc_rt(
        rt,
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_free_rt(
    rt: *mut JSRuntime,
    ptr: *mut c_void
)
{
    js_free_rt(
        rt,
        ptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_realloc_rt(
    rt: *mut JSRuntime,
    ptr: *mut c_void,
    size: usize
) -> *mut c_void
{
    js_realloc_rt(
        rt,
        ptr,
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_malloc_usable_size_rt(
    rt: *mut JSRuntime,
    ptr: *const c_void
) -> usize
{
    js_malloc_usable_size_rt(
        rt,
        ptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_mallocz_rt(
    rt: *mut JSRuntime,
    size: usize
) -> *mut c_void
{
    js_mallocz_rt(
        rt,
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_malloc(
    ctx: *mut JSContext,
    size: usize
) -> *mut c_void
{
    js_malloc(
        ctx,
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_free(
    ctx: *mut JSContext,
    ptr: *mut c_void
)
{
    js_free(
        ctx,
        ptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_realloc(
    ctx: *mut JSContext,
    ptr: *mut c_void,
    size: usize
) -> *mut c_void
{
    js_realloc(
        ctx,
        ptr,
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_malloc_usable_size(
    ctx: *mut JSContext,
    ptr: *const c_void
) -> usize
{
    js_malloc_usable_size(
        ctx,
        ptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_realloc2(
    ctx: *mut JSContext,
    ptr: *mut c_void,
    size: usize,
    pslack: *mut usize
) -> *mut c_void
{
    js_realloc2(
        ctx,
        ptr,
        size,
        pslack
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_mallocz(
    ctx: *mut JSContext,
    size: usize
) -> *mut c_void
{
    js_mallocz(
        ctx,
        size
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_strdup(
    ctx: *mut JSContext,
    str_: *const c_char
) -> *mut c_char
{
    js_strdup(
        ctx,
        str_
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_strndup(
    ctx: *mut JSContext,
    s: *const c_char,
    n: usize
) -> *mut c_char
{
    js_strndup(
        ctx,
        s,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ComputeMemoryUsage(
    rt: *mut JSRuntime,
    s: *mut JSMemoryUsage
)
{
    JS_ComputeMemoryUsage(
        rt,
        s
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DumpMemoryUsage(
    fp: *mut FILE,
    s: *const JSMemoryUsage,
    rt: *mut JSRuntime
)
{
    JS_DumpMemoryUsage(
        fp,
        s,
        rt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewAtomLen(
    ctx: *mut JSContext,
    str_: *const c_char,
    len: usize
) -> JSAtom
{
    JS_NewAtomLen(
        ctx,
        str_,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewAtom(
    ctx: *mut JSContext,
    str_: *const c_char
) -> JSAtom
{
    JS_NewAtom(
        ctx,
        str_
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewAtomUInt32(
    ctx: *mut JSContext,
    n: u32
) -> JSAtom
{
    JS_NewAtomUInt32(
        ctx,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewAtomLenRT(
    rt: *mut JSRuntime,
    str_: *const c_char,
    len: c_int
) -> JSAtom
{
    JS_NewAtomLenRT(
        rt,
        str_,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewAtomSymbolLenRT(
    rt: *mut JSRuntime,
    str_: *const c_char,
    len: c_int
) -> JSAtom
{
    JS_NewAtomSymbolLenRT(
        rt,
        str_,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AtomGetStr(
    ctx: *mut JSContext,
    buf: *mut c_char,
    buf_size: c_int,
    atom: JSAtom
) -> *const c_char
{
    JS_AtomGetStr(
        ctx,
        buf,
        buf_size,
        atom
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AtomGetStrRT(
    rt: *mut JSRuntime,
    buf: *mut c_char,
    buf_size: c_int,
    atom: JSAtom
) -> *const c_char
{
    JS_AtomGetStrRT(
        rt,
        buf,
        buf_size,
        atom
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DupAtom(
    ctx: *mut JSContext,
    v: JSAtom
) -> JSAtom
{
    JS_DupAtom(
        ctx,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DupAtomRT(
    rt: *mut JSRuntime,
    v: JSAtom
) -> JSAtom
{
    JS_DupAtomRT(
        rt,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_FreeAtom(
    ctx: *mut JSContext,
    v: JSAtom
)
{
    JS_FreeAtom(
        ctx,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_FreeAtomRT(
    rt: *mut JSRuntime,
    v: JSAtom
)
{
    JS_FreeAtomRT(
        rt,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AtomToValue(
    ctx: *mut JSContext,
    atom: JSAtom
) -> JSValue
{
    JS_AtomToValue(
        ctx,
        atom
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AtomToString(
    ctx: *mut JSContext,
    atom: JSAtom
) -> JSValue
{
    JS_AtomToString(
        ctx,
        atom
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AtomToCString(
    ctx: *mut JSContext,
    atom: JSAtom
) -> *const c_char
{
    JS_AtomToCString(
        ctx,
        atom
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ValueToAtom(
    ctx: *mut JSContext,
    val: JSValue
) -> JSAtom
{
    JS_ValueToAtom(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AtomIsArrayIndex(
    ctx: *mut JSContext,
    pval: *mut u32,
    atom: JSAtom
) -> c_int
{
    JS_AtomIsArrayIndex(
        ctx,
        pval,
        atom
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_free_prop_enum(
    ctx: *mut JSContext,
    tab: *mut JSPropertyEnum,
    len: u32
)
{
    js_free_prop_enum(
        ctx,
        tab,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewClassID(
    pclass_id: *mut JSClassID
) -> JSClassID
{
    JS_NewClassID(
        pclass_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewClass(
    rt: *mut JSRuntime,
    class_id: JSClassID,
    class_def: *const JSClassDef
) -> c_int
{
    JS_NewClass(
        rt,
        class_id,
        class_def
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsRegisteredClass(
    rt: *mut JSRuntime,
    class_id: JSClassID
) -> c_int
{
    JS_IsRegisteredClass(
        rt,
        class_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewBigInt64(
    ctx: *mut JSContext,
    v: i64
) -> JSValue
{
    JS_NewBigInt64(
        ctx,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewBigUint64(
    ctx: *mut JSContext,
    v: u64
) -> JSValue
{
    JS_NewBigUint64(
        ctx,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewDate(
    ctx: *mut JSContext,
    ms_1970: f64
) -> JSValue
{
    JS_NewDate(
        ctx,
        ms_1970
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsDate(
    ctx: *mut JSContext,
    obj: JSValue,
    ms_since_1970: *mut f64
) -> c_int
{
    JS_IsDate(
        ctx,
        obj,
        ms_since_1970
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsObjectPlain(
    ctx: *mut JSContext,
    val: JSValue
) -> c_int
{
    JS_IsObjectPlain(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_Throw(
    ctx: *mut JSContext,
    obj: JSValue
) -> JSValue
{
    JS_Throw(
        ctx,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetException(
    ctx: *mut JSContext
) -> JSValue
{
    JS_GetException(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsError(
    ctx: *mut JSContext,
    val: JSValue
) -> c_int
{
    JS_IsError(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ResetUncatchableError(
    ctx: *mut JSContext
)
{
    JS_ResetUncatchableError(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewError(
    ctx: *mut JSContext
) -> JSValue
{
    JS_NewError(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ThrowSyntaxError(
    ctx: *mut JSContext,
    fmt: *const c_char
) -> JSValue
{
    JS_ThrowSyntaxError(
        ctx,
        fmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ThrowTypeError(
    ctx: *mut JSContext,
    fmt: *const c_char
) -> JSValue
{
    JS_ThrowTypeError(
        ctx,
        fmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ThrowReferenceError(
    ctx: *mut JSContext,
    fmt: *const c_char
) -> JSValue
{
    JS_ThrowReferenceError(
        ctx,
        fmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ThrowRangeError(
    ctx: *mut JSContext,
    fmt: *const c_char
) -> JSValue
{
    JS_ThrowRangeError(
        ctx,
        fmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ThrowInternalError(
    ctx: *mut JSContext,
    fmt: *const c_char
) -> JSValue
{
    JS_ThrowInternalError(
        ctx,
        fmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ThrowOutOfMemory(
    ctx: *mut JSContext
) -> JSValue
{
    JS_ThrowOutOfMemory(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ToBool(
    ctx: *mut JSContext,
    val: JSValue
) -> c_int
{
    JS_ToBool(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ToInt32(
    ctx: *mut JSContext,
    pres: *mut i32,
    val: JSValue
) -> c_int
{
    JS_ToInt32(
        ctx,
        pres,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ToInt64(
    ctx: *mut JSContext,
    pres: *mut i64,
    val: JSValue
) -> c_int
{
    JS_ToInt64(
        ctx,
        pres,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ToIndex(
    ctx: *mut JSContext,
    plen: *mut u64,
    val: JSValue
) -> c_int
{
    JS_ToIndex(
        ctx,
        plen,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ToFloat64(
    ctx: *mut JSContext,
    pres: *mut f64,
    val: JSValue
) -> c_int
{
    JS_ToFloat64(
        ctx,
        pres,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ToBigInt64(
    ctx: *mut JSContext,
    pres: *mut i64,
    val: JSValue
) -> c_int
{
    JS_ToBigInt64(
        ctx,
        pres,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ToInt64Ext(
    ctx: *mut JSContext,
    pres: *mut i64,
    val: JSValue
) -> c_int
{
    JS_ToInt64Ext(
        ctx,
        pres,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewStringLen(
    ctx: *mut JSContext,
    str1: *const c_char,
    len1: usize
) -> JSValue
{
    JS_NewStringLen(
        ctx,
        str1,
        len1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewString(
    ctx: *mut JSContext,
    str_: *const c_char
) -> JSValue
{
    JS_NewString(
        ctx,
        str_
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewAtomString(
    ctx: *mut JSContext,
    str_: *const c_char
) -> JSValue
{
    JS_NewAtomString(
        ctx,
        str_
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ToString(
    ctx: *mut JSContext,
    val: JSValue
) -> JSValue
{
    JS_ToString(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ToPropertyKey(
    ctx: *mut JSContext,
    val: JSValue
) -> JSValue
{
    JS_ToPropertyKey(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ToCStringLen2(
    ctx: *mut JSContext,
    plen: *mut usize,
    val1: JSValue,
    cesu8: c_int
) -> *const c_char
{
    JS_ToCStringLen2(
        ctx,
        plen,
        val1,
        cesu8
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_FreeCString(
    ctx: *mut JSContext,
    ptr: *const c_char
)
{
    JS_FreeCString(
        ctx,
        ptr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewObjectProtoClass(
    ctx: *mut JSContext,
    proto: JSValue,
    class_id: JSClassID
) -> JSValue
{
    JS_NewObjectProtoClass(
        ctx,
        proto,
        class_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewObjectClass(
    ctx: *mut JSContext,
    class_id: c_int
) -> JSValue
{
    JS_NewObjectClass(
        ctx,
        class_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewObjectProto(
    ctx: *mut JSContext,
    proto: JSValue
) -> JSValue
{
    JS_NewObjectProto(
        ctx,
        proto
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewObject(
    ctx: *mut JSContext
) -> JSValue
{
    JS_NewObject(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsFunction(
    ctx: *mut JSContext,
    val: JSValue
) -> c_int
{
    JS_IsFunction(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsConstructor(
    ctx: *mut JSContext,
    val: JSValue
) -> c_int
{
    JS_IsConstructor(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetConstructorBit(
    ctx: *mut JSContext,
    func_obj: JSValue,
    val: c_int
) -> c_int
{
    JS_SetConstructorBit(
        ctx,
        func_obj,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsFunctionOfThisRealm(
    ctx: *mut JSContext,
    val: JSValue
) -> c_int
{
    JS_IsFunctionOfThisRealm(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AreFunctionsOfSameOrigin(
    ctx: *mut JSContext,
    f1: JSValue,
    f2: JSValue
) -> c_int
{
    JS_AreFunctionsOfSameOrigin(
        ctx,
        f1,
        f2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewArray(
    ctx: *mut JSContext
) -> JSValue
{
    JS_NewArray(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsArray(
    ctx: *mut JSContext,
    val: JSValue
) -> c_int
{
    JS_IsArray(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsTuple(
    ctx: *mut JSContext,
    val: JSValue
) -> c_int
{
    JS_IsTuple(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetTupleTag(
    ctx: *mut JSContext,
    val: JSValue
) -> JSValue
{
    JS_GetTupleTag(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewFastArray(
    ctx: *mut JSContext,
    argc: c_int,
    argv: *mut JSValue
) -> JSValue
{
    JS_NewFastArray(
        ctx,
        argc,
        argv
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetFastArray(
    ctx: *mut JSContext,
    obj: JSValue,
    arrpp: *mut *mut JSValue,
    countp: *mut u32
) -> c_int
{
    JS_GetFastArray(
        ctx,
        obj,
        arrpp,
        countp
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetPropertyInternal(
    ctx: *mut JSContext,
    obj: JSValue,
    prop: JSAtom,
    receiver: JSValue,
    throw_ref_error: c_int
) -> JSValue
{
    JS_GetPropertyInternal(
        ctx,
        obj,
        prop,
        receiver,
        throw_ref_error
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetPropertyStr(
    ctx: *mut JSContext,
    this_obj: JSValue,
    prop: *const c_char
) -> JSValue
{
    JS_GetPropertyStr(
        ctx,
        this_obj,
        prop
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetPropertyUint32(
    ctx: *mut JSContext,
    this_obj: JSValue,
    idx: u32
) -> JSValue
{
    JS_GetPropertyUint32(
        ctx,
        this_obj,
        idx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetPropertyLength(
    ctx: *mut JSContext,
    plength: *mut i64,
    obj: JSValue
) -> c_int
{
    JS_GetPropertyLength(
        ctx,
        plength,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetPropertyInternal(
    ctx: *mut JSContext,
    this_obj: JSValue,
    prop: JSAtom,
    val: JSValue,
    flags: c_int
) -> c_int
{
    JS_SetPropertyInternal(
        ctx,
        this_obj,
        prop,
        val,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetPropertyUint32(
    ctx: *mut JSContext,
    this_obj: JSValue,
    idx: u32,
    val: JSValue
) -> c_int
{
    JS_SetPropertyUint32(
        ctx,
        this_obj,
        idx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetPropertyInt64(
    ctx: *mut JSContext,
    this_obj: JSValue,
    idx: i64,
    val: JSValue
) -> c_int
{
    JS_SetPropertyInt64(
        ctx,
        this_obj,
        idx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetPropertyStr(
    ctx: *mut JSContext,
    this_obj: JSValue,
    prop: *const c_char,
    val: JSValue
) -> c_int
{
    JS_SetPropertyStr(
        ctx,
        this_obj,
        prop,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_HasProperty(
    ctx: *mut JSContext,
    this_obj: JSValue,
    prop: JSAtom
) -> c_int
{
    JS_HasProperty(
        ctx,
        this_obj,
        prop
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsExtensible(
    ctx: *mut JSContext,
    obj: JSValue
) -> c_int
{
    JS_IsExtensible(
        ctx,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_PreventExtensions(
    ctx: *mut JSContext,
    obj: JSValue
) -> c_int
{
    JS_PreventExtensions(
        ctx,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DeleteProperty(
    ctx: *mut JSContext,
    obj: JSValue,
    prop: JSAtom,
    flags: c_int
) -> c_int
{
    JS_DeleteProperty(
        ctx,
        obj,
        prop,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetPrototype(
    ctx: *mut JSContext,
    obj: JSValue,
    proto_val: JSValue
) -> c_int
{
    JS_SetPrototype(
        ctx,
        obj,
        proto_val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetPrototype(
    ctx: *mut JSContext,
    val: JSValue
) -> JSValue
{
    JS_GetPrototype(
        ctx,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetPrototypeOfDate(
    ctx: *mut JSContext
) -> JSValue
{
    JS_GetPrototypeOfDate(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_CopyDataProperties(
    ctx: *mut JSContext,
    target: JSValue,
    source: JSValue,
    excluded: JSValue,
    setprop: c_int
) -> c_int
{
    JS_CopyDataProperties(
        ctx,
        target,
        source,
        excluded,
        setprop
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetOwnPropertyNames(
    ctx: *mut JSContext,
    ptab: *mut *mut JSPropertyEnum,
    plen: *mut u32,
    obj: JSValue,
    flags: c_int
) -> c_int
{
    JS_GetOwnPropertyNames(
        ctx,
        ptab,
        plen,
        obj,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetOwnProperty(
    ctx: *mut JSContext,
    desc: *mut JSPropertyDescriptor,
    obj: JSValue,
    prop: JSAtom
) -> c_int
{
    JS_GetOwnProperty(
        ctx,
        desc,
        obj,
        prop
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_Call(
    ctx: *mut JSContext,
    func_obj: JSValue,
    this_obj: JSValue,
    argc: c_int,
    argv: *mut JSValue
) -> JSValue
{
    JS_Call(
        ctx,
        func_obj,
        this_obj,
        argc,
        argv
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_Invoke(
    ctx: *mut JSContext,
    this_val: JSValue,
    atom: JSAtom,
    argc: c_int,
    argv: *mut JSValue
) -> JSValue
{
    JS_Invoke(
        ctx,
        this_val,
        atom,
        argc,
        argv
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_CallConstructor(
    ctx: *mut JSContext,
    func_obj: JSValue,
    argc: c_int,
    argv: *mut JSValue
) -> JSValue
{
    JS_CallConstructor(
        ctx,
        func_obj,
        argc,
        argv
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_CallConstructor2(
    ctx: *mut JSContext,
    func_obj: JSValue,
    new_target: JSValue,
    argc: c_int,
    argv: *mut JSValue
) -> JSValue
{
    JS_CallConstructor2(
        ctx,
        func_obj,
        new_target,
        argc,
        argv
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DetectModule(
    input: *const c_char,
    input_len: usize
) -> c_int
{
    JS_DetectModule(
        input,
        input_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_Eval(
    ctx: *mut JSContext,
    input: *const c_char,
    input_len: usize,
    filename: *const c_char,
    eval_flags: c_int
) -> JSValue
{
    JS_Eval(
        ctx,
        input,
        input_len,
        filename,
        eval_flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_Eval2(
    ctx: *mut JSContext,
    input: *const c_char,
    input_len: usize,
    filename: *const c_char,
    eval_flags: c_int,
    line_no: c_int
) -> JSValue
{
    JS_Eval2(
        ctx,
        input,
        input_len,
        filename,
        eval_flags,
        line_no
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_EvalFunction(
    ctx: *mut JSContext,
    fun_obj: JSValue
) -> JSValue
{
    JS_EvalFunction(
        ctx,
        fun_obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_EvalThis(
    ctx: *mut JSContext,
    this_obj: JSValue,
    input: *const c_char,
    input_len: usize,
    filename: *const c_char,
    eval_flags: c_int
) -> JSValue
{
    JS_EvalThis(
        ctx,
        this_obj,
        input,
        input_len,
        filename,
        eval_flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetGlobalObject(
    ctx: *mut JSContext
) -> JSValue
{
    JS_GetGlobalObject(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsInstanceOf(
    ctx: *mut JSContext,
    val: JSValue,
    obj: JSValue
) -> c_int
{
    JS_IsInstanceOf(
        ctx,
        val,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DefineProperty(
    ctx: *mut JSContext,
    this_obj: JSValue,
    prop: JSAtom,
    val: JSValue,
    getter: JSValue,
    setter: JSValue,
    flags: c_int
) -> c_int
{
    JS_DefineProperty(
        ctx,
        this_obj,
        prop,
        val,
        getter,
        setter,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DefinePropertyValue(
    ctx: *mut JSContext,
    this_obj: JSValue,
    prop: JSAtom,
    val: JSValue,
    flags: c_int
) -> c_int
{
    JS_DefinePropertyValue(
        ctx,
        this_obj,
        prop,
        val,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DefinePropertyValueUint32(
    ctx: *mut JSContext,
    this_obj: JSValue,
    idx: u32,
    val: JSValue,
    flags: c_int
) -> c_int
{
    JS_DefinePropertyValueUint32(
        ctx,
        this_obj,
        idx,
        val,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DefinePropertyValueStr(
    ctx: *mut JSContext,
    this_obj: JSValue,
    prop: *const c_char,
    val: JSValue,
    flags: c_int
) -> c_int
{
    JS_DefinePropertyValueStr(
        ctx,
        this_obj,
        prop,
        val,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DefinePropertyGetSet(
    ctx: *mut JSContext,
    this_obj: JSValue,
    prop: JSAtom,
    getter: JSValue,
    setter: JSValue,
    flags: c_int
) -> c_int
{
    JS_DefinePropertyGetSet(
        ctx,
        this_obj,
        prop,
        getter,
        setter,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetOpaque(
    obj: JSValue,
    opaque: *mut c_void
)
{
    JS_SetOpaque(
        obj,
        opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetOpaque(
    obj: JSValue,
    class_id: JSClassID
) -> *mut c_void
{
    JS_GetOpaque(
        obj,
        class_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetOpaque2(
    ctx: *mut JSContext,
    obj: JSValue,
    class_id: JSClassID
) -> *mut c_void
{
    JS_GetOpaque2(
        ctx,
        obj,
        class_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetClassID(
    obj: JSValue,
    ppopaque: *mut *mut c_void
) -> JSClassID
{
    JS_GetClassID(
        obj,
        ppopaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ParseJSON(
    ctx: *mut JSContext,
    buf: *const c_char,
    buf_len: usize,
    filename: *const c_char
) -> JSValue
{
    JS_ParseJSON(
        ctx,
        buf,
        buf_len,
        filename
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ParseJSON2(
    ctx: *mut JSContext,
    buf: *const c_char,
    buf_len: usize,
    filename: *const c_char,
    flags: c_int
) -> JSValue
{
    JS_ParseJSON2(
        ctx,
        buf,
        buf_len,
        filename,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_JSONStringify(
    ctx: *mut JSContext,
    obj: JSValue,
    replacer: JSValue,
    space0: JSValue
) -> JSValue
{
    JS_JSONStringify(
        ctx,
        obj,
        replacer,
        space0
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewArrayBuffer(
    ctx: *mut JSContext,
    buf: *mut u8,
    len: usize,
    free_func: JSFreeArrayBufferDataFunc,
    opaque: *mut c_void,
    is_shared: c_int
) -> JSValue
{
    JS_NewArrayBuffer(
        ctx,
        buf,
        len,
        free_func,
        opaque,
        is_shared
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewArrayBufferCopy(
    ctx: *mut JSContext,
    buf: *const u8,
    len: usize
) -> JSValue
{
    JS_NewArrayBufferCopy(
        ctx,
        buf,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_DetachArrayBuffer(
    ctx: *mut JSContext,
    obj: JSValue
)
{
    JS_DetachArrayBuffer(
        ctx,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetArrayBuffer(
    ctx: *mut JSContext,
    psize: *mut usize,
    obj: JSValue
) -> *mut u8
{
    JS_GetArrayBuffer(
        ctx,
        psize,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetTypedArrayBuffer(
    ctx: *mut JSContext,
    obj: JSValue,
    pbyte_offset: *mut usize,
    pbyte_length: *mut usize,
    pbytes_per_element: *mut usize
) -> JSValue
{
    JS_GetTypedArrayBuffer(
        ctx,
        obj,
        pbyte_offset,
        pbyte_length,
        pbytes_per_element
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetSharedArrayBufferFunctions(
    rt: *mut JSRuntime,
    sf: *const JSSharedArrayBufferFunctions
)
{
    JS_SetSharedArrayBufferFunctions(
        rt,
        sf
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewPromiseCapability(
    ctx: *mut JSContext,
    resolving_funcs: *mut JSValue
) -> JSValue
{
    JS_NewPromiseCapability(
        ctx,
        resolving_funcs
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetHostPromiseRejectionTracker(
    rt: *mut JSRuntime,
    cb: JSHostPromiseRejectionTracker,
    opaque: *mut c_void
)
{
    JS_SetHostPromiseRejectionTracker(
        rt,
        cb,
        opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetInterruptHandler(
    rt: *mut JSRuntime,
    cb: JSInterruptHandler,
    opaque: *mut c_void
)
{
    JS_SetInterruptHandler(
        rt,
        cb,
        opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetCanBlock(
    rt: *mut JSRuntime,
    can_block: c_int
)
{
    JS_SetCanBlock(
        rt,
        can_block
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetIsHTMLDDA(
    ctx: *mut JSContext,
    obj: JSValue
)
{
    JS_SetIsHTMLDDA(
        ctx,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetModuleLoaderFunc(
    rt: *mut JSRuntime,
    module_normalize: JSModuleNormalizeFunc,
    module_loader: JSModuleLoaderFunc,
    opaque: *mut c_void
)
{
    JS_SetModuleLoaderFunc(
        rt,
        module_normalize,
        module_loader,
        opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetImportMeta(
    ctx: *mut JSContext,
    m: *mut JSModuleDef
) -> JSValue
{
    JS_GetImportMeta(
        ctx,
        m
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetModuleName(
    ctx: *mut JSContext,
    m: *mut JSModuleDef
) -> JSAtom
{
    JS_GetModuleName(
        ctx,
        m
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_EnqueueJob(
    ctx: *mut JSContext,
    job_func: JSJobFunc,
    argc: c_int,
    argv: *mut JSValue
) -> c_int
{
    JS_EnqueueJob(
        ctx,
        job_func,
        argc,
        argv
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_IsJobPending(
    rt: *mut JSRuntime
) -> c_int
{
    JS_IsJobPending(
        rt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ExecutePendingJob(
    rt: *mut JSRuntime,
    pctx: *mut *mut JSContext
) -> c_int
{
    JS_ExecutePendingJob(
        rt,
        pctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_WriteObject(
    ctx: *mut JSContext,
    psize: *mut usize,
    obj: JSValue,
    flags: c_int
) -> *mut u8
{
    JS_WriteObject(
        ctx,
        psize,
        obj,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ReadObject(
    ctx: *mut JSContext,
    buf: *const u8,
    buf_len: usize,
    flags: c_int
) -> JSValue
{
    JS_ReadObject(
        ctx,
        buf,
        buf_len,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ReadObject2(
    ctx: *mut JSContext,
    buf: *const u8,
    buf_len: usize,
    flags: c_int,
    remnants_len: *mut usize
) -> JSValue
{
    JS_ReadObject2(
        ctx,
        buf,
        buf_len,
        flags,
        remnants_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_ResolveModule(
    ctx: *mut JSContext,
    obj: JSValue
) -> c_int
{
    JS_ResolveModule(
        ctx,
        obj
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetScriptOrModuleName(
    ctx: *mut JSContext,
    n_stack_levels: c_int
) -> JSAtom
{
    JS_GetScriptOrModuleName(
        ctx,
        n_stack_levels
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_RunModule(
    ctx: *mut JSContext,
    basename: *const c_char,
    filename: *const c_char
) -> *mut JSModuleDef
{
    JS_RunModule(
        ctx,
        basename,
        filename
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetModuleExportItemStr(
    ctx: *mut JSContext,
    m: *mut JSModuleDef,
    name: *const c_char
) -> JSValue
{
    JS_GetModuleExportItemStr(
        ctx,
        m,
        name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_GetModuleExportItem(
    ctx: *mut JSContext,
    m: *mut JSModuleDef,
    atom: JSAtom
) -> JSValue
{
    JS_GetModuleExportItem(
        ctx,
        m,
        atom
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewCFunction2(
    ctx: *mut JSContext,
    func: JSCFunction,
    name: *const c_char,
    length: c_int,
    cproto: JSCFunctionEnum,
    magic: c_int
) -> JSValue
{
    JS_NewCFunction2(
        ctx,
        func,
        name,
        length,
        cproto,
        magic
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewCFunctionData(
    ctx: *mut JSContext,
    func: JSCFunctionData,
    length: c_int,
    magic: c_int,
    data_len: c_int,
    data: *mut JSValue
) -> JSValue
{
    JS_NewCFunctionData(
        ctx,
        func,
        length,
        magic,
        data_len,
        data
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetConstructor(
    ctx: *mut JSContext,
    func_obj: JSValue,
    proto: JSValue
)
{
    JS_SetConstructor(
        ctx,
        func_obj,
        proto
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetPropertyFunctionList(
    ctx: *mut JSContext,
    obj: JSValue,
    tab: *const JSCFunctionListEntry,
    len: c_int
)
{
    JS_SetPropertyFunctionList(
        ctx,
        obj,
        tab,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_NewCModule(
    ctx: *mut JSContext,
    name_str: *const c_char,
    func: JSModuleInitFunc
) -> *mut JSModuleDef
{
    JS_NewCModule(
        ctx,
        name_str,
        func
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddModuleExport(
    ctx: *mut JSContext,
    m: *mut JSModuleDef,
    name_str: *const c_char
) -> c_int
{
    JS_AddModuleExport(
        ctx,
        m,
        name_str
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_AddModuleExportList(
    ctx: *mut JSContext,
    m: *mut JSModuleDef,
    tab: *const JSCFunctionListEntry,
    len: c_int
) -> c_int
{
    JS_AddModuleExportList(
        ctx,
        m,
        tab,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetModuleExport(
    ctx: *mut JSContext,
    m: *mut JSModuleDef,
    export_name: *const c_char,
    val: JSValue
) -> c_int
{
    JS_SetModuleExport(
        ctx,
        m,
        export_name,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_JS_SetModuleExportList(
    ctx: *mut JSContext,
    m: *mut JSModuleDef,
    tab: *const JSCFunctionListEntry,
    len: c_int
) -> c_int
{
    JS_SetModuleExportList(
        ctx,
        m,
        tab,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_debugger_get_object_id(
    val: JSValue
) -> *mut c_void
{
    js_debugger_get_object_id(
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_init_module_std(
    ctx: *mut JSContext,
    module_name: *const c_char
) -> *mut JSModuleDef
{
    js_init_module_std(
        ctx,
        module_name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_init_module_os(
    ctx: *mut JSContext,
    module_name: *const c_char
) -> *mut JSModuleDef
{
    js_init_module_os(
        ctx,
        module_name
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_std_add_helpers(
    ctx: *mut JSContext,
    argc: c_int,
    argv: *mut *mut c_char
)
{
    js_std_add_helpers(
        ctx,
        argc,
        argv
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_std_loop(
    ctx: *mut JSContext
)
{
    js_std_loop(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_std_init_handlers(
    rt: *mut JSRuntime
)
{
    js_std_init_handlers(
        rt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_std_free_handlers(
    rt: *mut JSRuntime
)
{
    js_std_free_handlers(
        rt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_std_dump_error(
    ctx: *mut JSContext
)
{
    js_std_dump_error(
        ctx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_load_file(
    ctx: *mut JSContext,
    pbuf_len: *mut usize,
    filename: *const c_char
) -> *mut u8
{
    js_load_file(
        ctx,
        pbuf_len,
        filename
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_module_set_import_meta(
    ctx: *mut JSContext,
    func_val: JSValue,
    use_realpath: c_int,
    is_main: c_int
) -> c_int
{
    js_module_set_import_meta(
        ctx,
        func_val,
        use_realpath,
        is_main
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_module_loader(
    ctx: *mut JSContext,
    module_name: *const c_char,
    opaque: *mut c_void
) -> *mut JSModuleDef
{
    js_module_loader(
        ctx,
        module_name,
        opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_std_eval_binary(
    ctx: *mut JSContext,
    buf: *const u8,
    buf_len: usize,
    flags: c_int
)
{
    js_std_eval_binary(
        ctx,
        buf,
        buf_len,
        flags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_std_promise_rejection_tracker(
    ctx: *mut JSContext,
    promise: JSValue,
    reason: JSValue,
    is_handled: c_int,
    opaque: *mut c_void
)
{
    js_std_promise_rejection_tracker(
        ctx,
        promise,
        reason,
        is_handled,
        opaque
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_js_std_set_worker_new_context_func(
    func: Option<unsafe extern "C" fn(rt: *mut JSRuntime) -> *mut JSContext>
)
{
    js_std_set_worker_new_context_func(
        func
    )
}

    