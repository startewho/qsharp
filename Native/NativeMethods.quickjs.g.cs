// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace QuickJs
{
    public static unsafe partial class NativeMethods
    {
        const string __DllName = "quickjs";



        [DllImport(__DllName, EntryPoint = "csbindgen_fgetwc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort fgetwc(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fputwc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort fputwc(ushort _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_getwc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort getwc(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_getwchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort getwchar();

        [DllImport(__DllName, EntryPoint = "csbindgen_fgetws", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort* fgetws(ushort* _Buffer, int _BufferCount, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fputws", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fputws(ushort* _Buffer, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_putwc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort putwc(ushort _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_putwchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort putwchar(ushort _Character);

        [DllImport(__DllName, EntryPoint = "csbindgen_ungetwc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort ungetwc(ushort _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_clearerr_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int clearerr_s(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fopen_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fopen_s(_iobuf** _Stream, byte* _FileName, byte* _Mode);

        [DllImport(__DllName, EntryPoint = "csbindgen_fread_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint fread_s(void* _Buffer, nuint _BufferSize, nuint _ElementSize, nuint _ElementCount, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_freopen_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int freopen_s(_iobuf** _Stream, byte* _FileName, byte* _Mode, _iobuf* _OldStream);

        [DllImport(__DllName, EntryPoint = "csbindgen_gets_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* gets_s(byte* _Buffer, nuint _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_tmpfile_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int tmpfile_s(_iobuf** _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_tmpnam_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int tmpnam_s(byte* _Buffer, nuint _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_clearerr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void clearerr(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fclose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fclose(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_feof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int feof(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_ferror", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ferror(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fflush", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fflush(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fgetc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fgetc(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fgetpos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fgetpos(_iobuf* _Stream, long* _Position);

        [DllImport(__DllName, EntryPoint = "csbindgen_fgets", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* fgets(byte* _Buffer, int _MaxCount, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _iobuf* fopen(byte* _FileName, byte* _Mode);

        [DllImport(__DllName, EntryPoint = "csbindgen_fputc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fputc(int _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fputs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fputs(byte* _Buffer, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong fread(void* _Buffer, ulong _ElementSize, ulong _ElementCount, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_freopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _iobuf* freopen(byte* _FileName, byte* _Mode, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fsetpos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fsetpos(_iobuf* _Stream, long* _Position);

        [DllImport(__DllName, EntryPoint = "csbindgen_fseek", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fseek(_iobuf* _Stream, CLong _Offset, int _Origin);

        [DllImport(__DllName, EntryPoint = "csbindgen_ftell", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong ftell(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_fwrite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong fwrite(void* _Buffer, ulong _ElementSize, ulong _ElementCount, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_getc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getc(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_getchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getchar();

        [DllImport(__DllName, EntryPoint = "csbindgen_perror", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void perror(byte* _ErrorMessage);

        [DllImport(__DllName, EntryPoint = "csbindgen_putc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putc(int _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_putchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putchar(int _Character);

        [DllImport(__DllName, EntryPoint = "csbindgen_puts", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int puts(byte* _Buffer);

        [DllImport(__DllName, EntryPoint = "csbindgen_remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int remove(byte* _FileName);

        [DllImport(__DllName, EntryPoint = "csbindgen_rename", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int rename(byte* _OldFileName, byte* _NewFileName);

        [DllImport(__DllName, EntryPoint = "csbindgen_unlink", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int unlink(byte* _FileName);

        [DllImport(__DllName, EntryPoint = "csbindgen_rewind", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void rewind(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_setbuf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void setbuf(_iobuf* _Stream, byte* _Buffer);

        [DllImport(__DllName, EntryPoint = "csbindgen_setvbuf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int setvbuf(_iobuf* _Stream, byte* _Buffer, int _Mode, nuint _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_tmpfile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _iobuf* tmpfile();

        [DllImport(__DllName, EntryPoint = "csbindgen_tmpnam", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* tmpnam(byte* _Buffer);

        [DllImport(__DllName, EntryPoint = "csbindgen_ungetc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ungetc(int _Character, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_tempnam", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* tempnam(byte* _Directory, byte* _FilePrefix);

        [DllImport(__DllName, EntryPoint = "csbindgen_fcloseall", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fcloseall();

        [DllImport(__DllName, EntryPoint = "csbindgen_fdopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _iobuf* fdopen(int _FileHandle, byte* _Format);

        [DllImport(__DllName, EntryPoint = "csbindgen_fgetchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fgetchar();

        [DllImport(__DllName, EntryPoint = "csbindgen_fileno", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fileno(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_flushall", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int flushall();

        [DllImport(__DllName, EntryPoint = "csbindgen_fputchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fputchar(int _Ch);

        [DllImport(__DllName, EntryPoint = "csbindgen_getw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getw(_iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_putw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putw(int _Ch, _iobuf* _Stream);

        [DllImport(__DllName, EntryPoint = "csbindgen_rmtmp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int rmtmp();

        [DllImport(__DllName, EntryPoint = "csbindgen_calloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* calloc(ulong _Count, ulong _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free(void* _Block);

        [DllImport(__DllName, EntryPoint = "csbindgen_malloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* malloc(ulong _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_realloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* realloc(void* _Block, ulong _Size);

        [DllImport(__DllName, EntryPoint = "csbindgen_bsearch_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* bsearch_s(void* _Key, void* _Base, nuint _NumOfElements, nuint _SizeOfElements, delegate* unmanaged[Cdecl]<void*, void*, void*, int> _CompareFunction, void* _Context);

        [DllImport(__DllName, EntryPoint = "csbindgen_qsort_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void qsort_s(void* _Base, nuint _NumOfElements, nuint _SizeOfElements, delegate* unmanaged[Cdecl]<void*, void*, void*, int> _CompareFunction, void* _Context);

        [DllImport(__DllName, EntryPoint = "csbindgen_bsearch", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* bsearch(void* _Key, void* _Base, nuint _NumOfElements, nuint _SizeOfElements, delegate* unmanaged[Cdecl]<void*, void*, int> _CompareFunction);

        [DllImport(__DllName, EntryPoint = "csbindgen_qsort", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void qsort(void* _Base, nuint _NumOfElements, nuint _SizeOfElements, delegate* unmanaged[Cdecl]<void*, void*, int> _CompareFunction);

        [DllImport(__DllName, EntryPoint = "csbindgen_lfind", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lfind(void* _Key, void* _Base, uint* _NumOfElements, uint _SizeOfElements, delegate* unmanaged[Cdecl]<void*, void*, int> _CompareFunction);

        [DllImport(__DllName, EntryPoint = "csbindgen_lsearch", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* lsearch(void* _Key, void* _Base, uint* _NumOfElements, uint _SizeOfElements, delegate* unmanaged[Cdecl]<void*, void*, int> _CompareFunction);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double wcstod(ushort* _String, ushort** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong wcstol(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstoll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long wcstoll(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstoul", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong wcstoul(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstoull", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong wcstoull(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double wcstold(ushort* _String, ushort** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float wcstof(ushort* _String, ushort** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_atexit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int atexit(delegate* unmanaged[Cdecl]<void> arg1);

        [DllImport(__DllName, EntryPoint = "csbindgen_at_quick_exit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int at_quick_exit(delegate* unmanaged[Cdecl]<void> arg1);

        [DllImport(__DllName, EntryPoint = "csbindgen_abs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int abs(int _Number);

        [DllImport(__DllName, EntryPoint = "csbindgen_labs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong labs(CLong _Number);

        [DllImport(__DllName, EntryPoint = "csbindgen_llabs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long llabs(long _Number);

        [DllImport(__DllName, EntryPoint = "csbindgen_div", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _div_t div(int _Numerator, int _Denominator);

        [DllImport(__DllName, EntryPoint = "csbindgen_ldiv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _ldiv_t ldiv(CLong _Numerator, CLong _Denominator);

        [DllImport(__DllName, EntryPoint = "csbindgen_lldiv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern _lldiv_t lldiv(long _Numerator, long _Denominator);

        [DllImport(__DllName, EntryPoint = "csbindgen_srand", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void srand(uint _Seed);

        [DllImport(__DllName, EntryPoint = "csbindgen_rand", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int rand();

        [DllImport(__DllName, EntryPoint = "csbindgen_atof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double atof(byte* _String);

        [DllImport(__DllName, EntryPoint = "csbindgen_atoi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int atoi(byte* _String);

        [DllImport(__DllName, EntryPoint = "csbindgen_atol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong atol(byte* _String);

        [DllImport(__DllName, EntryPoint = "csbindgen_atoll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long atoll(byte* _String);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float strtof(byte* _String, byte** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double strtod(byte* _String, byte** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double strtold(byte* _String, byte** _EndPtr);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong strtol(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtoll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long strtoll(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtoul", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong strtoul(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_strtoull", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong strtoull(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_mblen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int mblen(byte* _Ch, nuint _MaxCount);

        [DllImport(__DllName, EntryPoint = "csbindgen_mbtowc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int mbtowc(ushort* _DstCh, byte* _SrcCh, nuint _SrcSizeInBytes);

        [DllImport(__DllName, EntryPoint = "csbindgen_mbstowcs_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int mbstowcs_s(nuint* _PtNumOfCharConverted, ushort* _DstBuf, nuint _SizeInWords, byte* _SrcBuf, nuint _MaxCount);

        [DllImport(__DllName, EntryPoint = "csbindgen_mbstowcs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint mbstowcs(ushort* _Dest, byte* _Source, nuint _MaxCount);

        [DllImport(__DllName, EntryPoint = "csbindgen_wctomb", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int wctomb(byte* _MbCh, ushort _WCh);

        [DllImport(__DllName, EntryPoint = "csbindgen_wctomb_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int wctomb_s(int* _SizeConverted, byte* _MbCh, nuint _SizeInBytes, ushort _WCh);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstombs_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int wcstombs_s(nuint* _PtNumOfCharConverted, byte* _Dst, nuint _DstSizeInBytes, ushort* _Src, nuint _MaxCountInBytes);

        [DllImport(__DllName, EntryPoint = "csbindgen_wcstombs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint wcstombs(byte* _Dest, ushort* _Source, nuint _MaxCount);

        [DllImport(__DllName, EntryPoint = "csbindgen_getenv_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getenv_s(nuint* _RequiredCount, byte* _Buffer, nuint _BufferCount, byte* _VarName);

        [DllImport(__DllName, EntryPoint = "csbindgen_getenv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* getenv(byte* _VarName);

        [DllImport(__DllName, EntryPoint = "csbindgen_system", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int system(byte* _Command);

        [DllImport(__DllName, EntryPoint = "csbindgen_ecvt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ecvt(double _Value, int _DigitCount, int* _PtDec, int* _PtSign);

        [DllImport(__DllName, EntryPoint = "csbindgen_fcvt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* fcvt(double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign);

        [DllImport(__DllName, EntryPoint = "csbindgen_gcvt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* gcvt(double _Value, int _DigitCount, byte* _DstBuf);

        [DllImport(__DllName, EntryPoint = "csbindgen_itoa", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* itoa(int _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_ltoa", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ltoa(CLong _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_swab", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void swab(byte* _Buf1, byte* _Buf2, int _SizeInBytes);

        [DllImport(__DllName, EntryPoint = "csbindgen_ultoa", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ultoa(CULong _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, EntryPoint = "csbindgen_putenv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putenv(byte* _EnvString);

        [DllImport(__DllName, EntryPoint = "csbindgen_onexit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern delegate* unmanaged[Cdecl]<int> onexit(delegate* unmanaged[Cdecl]<int> _Func);

        [DllImport(__DllName, EntryPoint = "csbindgen_acos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double acos(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_asin", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double asin(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_atan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double atan(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_atan2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double atan2(double _Y, double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_cos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double cos(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_cosh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double cosh(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_exp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double exp(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_fabs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double fabs(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_fmod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double fmod(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_log", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double log(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_log10", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double log10(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_pow", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double pow(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_sin", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double sin(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_sinh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double sinh(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_sqrt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double sqrt(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_tan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double tan(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_tanh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double tanh(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_acosh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double acosh(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_asinh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double asinh(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_atanh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double atanh(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_cbrt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double cbrt(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_ceil", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double ceil(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_copysign", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double copysign(double _Number, double _Sign);

        [DllImport(__DllName, EntryPoint = "csbindgen_erf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double erf(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_erfc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double erfc(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_exp2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double exp2(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_expm1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double expm1(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_fdim", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double fdim(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_floor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double floor(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_fma", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double fma(double _X, double _Y, double _Z);

        [DllImport(__DllName, EntryPoint = "csbindgen_fmax", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double fmax(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_fmin", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double fmin(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_frexp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double frexp(double _X, int* _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_hypot", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double hypot(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_ilogb", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ilogb(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_ldexp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double ldexp(double _X, int _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_lgamma", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double lgamma(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_llrint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long llrint(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_llround", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long llround(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_log1p", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double log1p(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_log2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double log2(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_logb", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double logb(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_lrint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong lrint(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_lround", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong lround(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_modf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double modf(double _X, double* _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_nan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double nan(byte* _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_nearbyint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double nearbyint(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_nextafter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double nextafter(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_nexttoward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double nexttoward(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_remainder", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double remainder(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_remquo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double remquo(double _X, double _Y, int* _Z);

        [DllImport(__DllName, EntryPoint = "csbindgen_rint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double rint(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_round", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double round(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_scalbln", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double scalbln(double _X, CLong _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_scalbn", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double scalbn(double _X, int _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_tgamma", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double tgamma(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_trunc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double trunc(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_acoshf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float acoshf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_asinhf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float asinhf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_atanhf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float atanhf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_cbrtf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float cbrtf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_copysignf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float copysignf(float _Number, float _Sign);

        [DllImport(__DllName, EntryPoint = "csbindgen_erff", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float erff(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_erfcf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float erfcf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_expm1f", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float expm1f(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_exp2f", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float exp2f(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_fdimf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float fdimf(float _X, float _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_fmaf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float fmaf(float _X, float _Y, float _Z);

        [DllImport(__DllName, EntryPoint = "csbindgen_fmaxf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float fmaxf(float _X, float _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_fminf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float fminf(float _X, float _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_ilogbf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ilogbf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_lgammaf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float lgammaf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_llrintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long llrintf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_llroundf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long llroundf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_log1pf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float log1pf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_log2f", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float log2f(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_logbf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float logbf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_lrintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong lrintf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_lroundf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong lroundf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_nanf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float nanf(byte* _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_nearbyintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float nearbyintf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_nextafterf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float nextafterf(float _X, float _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_nexttowardf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float nexttowardf(float _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_remainderf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float remainderf(float _X, float _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_remquof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float remquof(float _X, float _Y, int* _Z);

        [DllImport(__DllName, EntryPoint = "csbindgen_rintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float rintf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_roundf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float roundf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_scalblnf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float scalblnf(float _X, CLong _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_scalbnf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float scalbnf(float _X, int _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_tgammaf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float tgammaf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_truncf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float truncf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_acosf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float acosf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_asinf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float asinf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_atan2f", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float atan2f(float _Y, float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_atanf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float atanf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_ceilf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float ceilf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_cosf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float cosf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_coshf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float coshf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_expf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float expf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_floorf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float floorf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_fmodf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float fmodf(float _X, float _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_log10f", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float log10f(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_logf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float logf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_modff", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float modff(float _X, float* _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_powf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float powf(float _X, float _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_sinf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float sinf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_sinhf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float sinhf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_sqrtf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float sqrtf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_tanf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float tanf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_tanhf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float tanhf(float _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_acoshl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double acoshl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_asinhl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double asinhl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_atanhl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double atanhl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_cbrtl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double cbrtl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_copysignl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double copysignl(double _Number, double _Sign);

        [DllImport(__DllName, EntryPoint = "csbindgen_erfl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double erfl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_erfcl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double erfcl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_exp2l", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double exp2l(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_expm1l", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double expm1l(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_fdiml", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double fdiml(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_fmal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double fmal(double _X, double _Y, double _Z);

        [DllImport(__DllName, EntryPoint = "csbindgen_fmaxl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double fmaxl(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_fminl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double fminl(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_ilogbl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ilogbl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_lgammal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double lgammal(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_llrintl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long llrintl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_llroundl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long llroundl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_log1pl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double log1pl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_log2l", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double log2l(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_logbl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double logbl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_lrintl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong lrintl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_lroundl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong lroundl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_nanl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double nanl(byte* _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_nearbyintl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double nearbyintl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_nextafterl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double nextafterl(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_nexttowardl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double nexttowardl(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_remainderl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double remainderl(double _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_remquol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double remquol(double _X, double _Y, int* _Z);

        [DllImport(__DllName, EntryPoint = "csbindgen_rintl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double rintl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_roundl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double roundl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_scalblnl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double scalblnl(double _X, CLong _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_scalbnl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double scalbnl(double _X, int _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_tgammal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double tgammal(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_truncl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double truncl(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_j0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double j0(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_j1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double j1(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_jn", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double jn(int _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_y0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double y0(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_y1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double y1(double _X);

        [DllImport(__DllName, EntryPoint = "csbindgen_yn", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double yn(int _X, double _Y);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewRuntime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSRuntime* JS_NewRuntime();

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetRuntimeInfo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetRuntimeInfo(JSRuntime* rt, byte* info);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetMemoryLimit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetMemoryLimit(JSRuntime* rt, nuint limit);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetGCThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetGCThreshold(JSRuntime* rt, nuint gc_threshold);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetMaxStackSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetMaxStackSize(JSRuntime* rt, nuint stack_size);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_UpdateStackTop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_UpdateStackTop(JSRuntime* rt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewRuntime2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSRuntime* JS_NewRuntime2(JSMallocFunctions* mf, void* opaque);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_FreeRuntime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_FreeRuntime(JSRuntime* rt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetRuntimeOpaque", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* JS_GetRuntimeOpaque(JSRuntime* rt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetRuntimeOpaque", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetRuntimeOpaque(JSRuntime* rt, void* opaque);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_MarkValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_MarkValue(JSRuntime* rt, JSValue val, delegate* unmanaged[Cdecl]<JSRuntime*, JSGCObjectHeader*, void> mark_func);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_RunGC", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_RunGC(JSRuntime* rt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsLiveObject", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsLiveObject(JSRuntime* rt, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewContext", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSContext* JS_NewContext(JSRuntime* rt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_FreeContext", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_FreeContext(JSContext* s);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DupContext", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSContext* JS_DupContext(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetContextOpaque", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* JS_GetContextOpaque(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetContextOpaque", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetContextOpaque(JSContext* ctx, void* opaque);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetRuntime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSRuntime* JS_GetRuntime(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetClassProto", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetClassProto(JSContext* ctx, uint class_id, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetClassProto", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetClassProto(JSContext* ctx, uint class_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetClassName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetClassName(JSContext* ctx, uint class_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewContextRaw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSContext* JS_NewContextRaw(JSRuntime* rt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicBaseObjects", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicBaseObjects(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicDate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicDate(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicEval", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicEval(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicStringNormalize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicStringNormalize(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicRegExpCompiler", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicRegExpCompiler(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicRegExp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicRegExp(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicJSON", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicJSON(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicProxy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicProxy(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicMapSet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicMapSet(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicTypedArrays", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicTypedArrays(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicPromise", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicPromise(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicBigInt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicBigInt(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicBigFloat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicBigFloat(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicBigDecimal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicBigDecimal(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddIntrinsicOperators", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_AddIntrinsicOperators(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_EnableBignumExt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_EnableBignumExt(JSContext* ctx, int enable);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_string_codePointRange", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue js_string_codePointRange(JSContext* ctx, JSValue this_val, int argc, JSValue* argv);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_malloc_rt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* js_malloc_rt(JSRuntime* rt, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_free_rt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_free_rt(JSRuntime* rt, void* ptr);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_realloc_rt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* js_realloc_rt(JSRuntime* rt, void* ptr, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_malloc_usable_size_rt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint js_malloc_usable_size_rt(JSRuntime* rt, void* ptr);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_mallocz_rt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* js_mallocz_rt(JSRuntime* rt, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_malloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* js_malloc(JSContext* ctx, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_free(JSContext* ctx, void* ptr);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_realloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* js_realloc(JSContext* ctx, void* ptr, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_malloc_usable_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint js_malloc_usable_size(JSContext* ctx, void* ptr);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_realloc2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* js_realloc2(JSContext* ctx, void* ptr, nuint size, nuint* pslack);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_mallocz", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* js_mallocz(JSContext* ctx, nuint size);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_strdup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* js_strdup(JSContext* ctx, byte* str_);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_strndup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* js_strndup(JSContext* ctx, byte* s, nuint n);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ComputeMemoryUsage", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_ComputeMemoryUsage(JSRuntime* rt, JSMemoryUsage* s);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DumpMemoryUsage", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_DumpMemoryUsage(_iobuf* fp, JSMemoryUsage* s, JSRuntime* rt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewAtomLen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_NewAtomLen(JSContext* ctx, byte* str_, nuint len);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewAtom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_NewAtom(JSContext* ctx, byte* str_);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewAtomUInt32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_NewAtomUInt32(JSContext* ctx, uint n);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewAtomLenRT", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_NewAtomLenRT(JSRuntime* rt, byte* str_, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewAtomSymbolLenRT", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_NewAtomSymbolLenRT(JSRuntime* rt, byte* str_, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AtomGetStr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* JS_AtomGetStr(JSContext* ctx, byte* buf, int buf_size, uint atom);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AtomGetStrRT", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* JS_AtomGetStrRT(JSRuntime* rt, byte* buf, int buf_size, uint atom);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DupAtom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_DupAtom(JSContext* ctx, uint v);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DupAtomRT", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_DupAtomRT(JSRuntime* rt, uint v);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_FreeAtom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_FreeAtom(JSContext* ctx, uint v);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_FreeAtomRT", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_FreeAtomRT(JSRuntime* rt, uint v);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AtomToValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_AtomToValue(JSContext* ctx, uint atom);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AtomToString", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_AtomToString(JSContext* ctx, uint atom);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AtomToCString", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* JS_AtomToCString(JSContext* ctx, uint atom);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ValueToAtom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_ValueToAtom(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AtomIsArrayIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_AtomIsArrayIndex(JSContext* ctx, uint* pval, uint atom);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_free_prop_enum", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_free_prop_enum(JSContext* ctx, JSPropertyEnum* tab, uint len);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewClassID", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_NewClassID(uint* pclass_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewClass", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_NewClass(JSRuntime* rt, uint class_id, JSClassDef* class_def);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsRegisteredClass", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsRegisteredClass(JSRuntime* rt, uint class_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewBigInt64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewBigInt64(JSContext* ctx, long v);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewBigUint64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewBigUint64(JSContext* ctx, ulong v);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewDate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewDate(JSContext* ctx, double ms_1970);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsDate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsDate(JSContext* ctx, JSValue obj, double* ms_since_1970);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsObjectPlain", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsObjectPlain(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_Throw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_Throw(JSContext* ctx, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetException", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetException(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsError", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsError(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ResetUncatchableError", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_ResetUncatchableError(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewError", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewError(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ThrowSyntaxError", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ThrowSyntaxError(JSContext* ctx, byte* fmt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ThrowTypeError", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ThrowTypeError(JSContext* ctx, byte* fmt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ThrowReferenceError", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ThrowReferenceError(JSContext* ctx, byte* fmt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ThrowRangeError", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ThrowRangeError(JSContext* ctx, byte* fmt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ThrowInternalError", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ThrowInternalError(JSContext* ctx, byte* fmt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ThrowOutOfMemory", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ThrowOutOfMemory(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ToBool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_ToBool(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ToInt32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_ToInt32(JSContext* ctx, int* pres, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ToInt64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_ToInt64(JSContext* ctx, long* pres, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ToIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_ToIndex(JSContext* ctx, ulong* plen, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ToFloat64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_ToFloat64(JSContext* ctx, double* pres, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ToBigInt64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_ToBigInt64(JSContext* ctx, long* pres, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ToInt64Ext", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_ToInt64Ext(JSContext* ctx, long* pres, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewStringLen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewStringLen(JSContext* ctx, byte* str1, nuint len1);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewString", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewString(JSContext* ctx, byte* str_);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewAtomString", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewAtomString(JSContext* ctx, byte* str_);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ToString", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ToString(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ToPropertyKey", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ToPropertyKey(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ToCStringLen2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* JS_ToCStringLen2(JSContext* ctx, nuint* plen, JSValue val1, int cesu8);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_FreeCString", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_FreeCString(JSContext* ctx, byte* ptr);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewObjectProtoClass", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewObjectProtoClass(JSContext* ctx, JSValue proto, uint class_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewObjectClass", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewObjectClass(JSContext* ctx, int class_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewObjectProto", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewObjectProto(JSContext* ctx, JSValue proto);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewObject", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewObject(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsFunction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsFunction(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsConstructor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsConstructor(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetConstructorBit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_SetConstructorBit(JSContext* ctx, JSValue func_obj, int val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsFunctionOfThisRealm", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsFunctionOfThisRealm(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AreFunctionsOfSameOrigin", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_AreFunctionsOfSameOrigin(JSContext* ctx, JSValue f1, JSValue f2);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewArray", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewArray(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsArray", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsArray(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsTuple", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsTuple(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetTupleTag", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetTupleTag(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewFastArray", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewFastArray(JSContext* ctx, int argc, JSValue* argv);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetFastArray", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_GetFastArray(JSContext* ctx, JSValue obj, JSValue** arrpp, uint* countp);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetPropertyInternal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetPropertyInternal(JSContext* ctx, JSValue obj, uint prop, JSValue receiver, int throw_ref_error);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetPropertyStr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetPropertyStr(JSContext* ctx, JSValue this_obj, byte* prop);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetPropertyUint32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetPropertyUint32(JSContext* ctx, JSValue this_obj, uint idx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetPropertyLength", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_GetPropertyLength(JSContext* ctx, long* plength, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetPropertyInternal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_SetPropertyInternal(JSContext* ctx, JSValue this_obj, uint prop, JSValue val, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetPropertyUint32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_SetPropertyUint32(JSContext* ctx, JSValue this_obj, uint idx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetPropertyInt64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_SetPropertyInt64(JSContext* ctx, JSValue this_obj, long idx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetPropertyStr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_SetPropertyStr(JSContext* ctx, JSValue this_obj, byte* prop, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_HasProperty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_HasProperty(JSContext* ctx, JSValue this_obj, uint prop);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsExtensible", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsExtensible(JSContext* ctx, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_PreventExtensions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_PreventExtensions(JSContext* ctx, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DeleteProperty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_DeleteProperty(JSContext* ctx, JSValue obj, uint prop, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetPrototype", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_SetPrototype(JSContext* ctx, JSValue obj, JSValue proto_val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetPrototype", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetPrototype(JSContext* ctx, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetPrototypeOfDate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetPrototypeOfDate(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_CopyDataProperties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_CopyDataProperties(JSContext* ctx, JSValue target, JSValue source, JSValue excluded, int setprop);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetOwnPropertyNames", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_GetOwnPropertyNames(JSContext* ctx, JSPropertyEnum** ptab, uint* plen, JSValue obj, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetOwnProperty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_GetOwnProperty(JSContext* ctx, JSPropertyDescriptor* desc, JSValue obj, uint prop);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_Call", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_Call(JSContext* ctx, JSValue func_obj, JSValue this_obj, int argc, JSValue* argv);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_Invoke", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_Invoke(JSContext* ctx, JSValue this_val, uint atom, int argc, JSValue* argv);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_CallConstructor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_CallConstructor(JSContext* ctx, JSValue func_obj, int argc, JSValue* argv);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_CallConstructor2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_CallConstructor2(JSContext* ctx, JSValue func_obj, JSValue new_target, int argc, JSValue* argv);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DetectModule", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_DetectModule(byte* input, nuint input_len);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_Eval", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_Eval(JSContext* ctx, byte* input, nuint input_len, byte* filename, int eval_flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_Eval2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_Eval2(JSContext* ctx, byte* input, nuint input_len, byte* filename, int eval_flags, int line_no);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_EvalFunction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_EvalFunction(JSContext* ctx, JSValue fun_obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_EvalThis", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_EvalThis(JSContext* ctx, JSValue this_obj, byte* input, nuint input_len, byte* filename, int eval_flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetGlobalObject", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetGlobalObject(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsInstanceOf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsInstanceOf(JSContext* ctx, JSValue val, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DefineProperty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_DefineProperty(JSContext* ctx, JSValue this_obj, uint prop, JSValue val, JSValue getter, JSValue setter, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DefinePropertyValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_DefinePropertyValue(JSContext* ctx, JSValue this_obj, uint prop, JSValue val, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DefinePropertyValueUint32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_DefinePropertyValueUint32(JSContext* ctx, JSValue this_obj, uint idx, JSValue val, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DefinePropertyValueStr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_DefinePropertyValueStr(JSContext* ctx, JSValue this_obj, byte* prop, JSValue val, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DefinePropertyGetSet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_DefinePropertyGetSet(JSContext* ctx, JSValue this_obj, uint prop, JSValue getter, JSValue setter, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetOpaque", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetOpaque(JSValue obj, void* opaque);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetOpaque", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* JS_GetOpaque(JSValue obj, uint class_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetOpaque2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* JS_GetOpaque2(JSContext* ctx, JSValue obj, uint class_id);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetClassID", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_GetClassID(JSValue obj, void** ppopaque);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ParseJSON", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ParseJSON(JSContext* ctx, byte* buf, nuint buf_len, byte* filename);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ParseJSON2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ParseJSON2(JSContext* ctx, byte* buf, nuint buf_len, byte* filename, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_JSONStringify", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_JSONStringify(JSContext* ctx, JSValue obj, JSValue replacer, JSValue space0);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewArrayBuffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewArrayBuffer(JSContext* ctx, byte* buf, nuint len, delegate* unmanaged[Cdecl]<JSRuntime*, void*, void*, void> free_func, void* opaque, int is_shared);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewArrayBufferCopy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewArrayBufferCopy(JSContext* ctx, byte* buf, nuint len);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_DetachArrayBuffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_DetachArrayBuffer(JSContext* ctx, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetArrayBuffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* JS_GetArrayBuffer(JSContext* ctx, nuint* psize, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetTypedArrayBuffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetTypedArrayBuffer(JSContext* ctx, JSValue obj, nuint* pbyte_offset, nuint* pbyte_length, nuint* pbytes_per_element);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetSharedArrayBufferFunctions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetSharedArrayBufferFunctions(JSRuntime* rt, JSSharedArrayBufferFunctions* sf);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewPromiseCapability", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewPromiseCapability(JSContext* ctx, JSValue* resolving_funcs);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetHostPromiseRejectionTracker", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetHostPromiseRejectionTracker(JSRuntime* rt, delegate* unmanaged[Cdecl]<JSContext*, JSValue, JSValue, int, void*, void> cb, void* opaque);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetInterruptHandler", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetInterruptHandler(JSRuntime* rt, delegate* unmanaged[Cdecl]<JSRuntime*, void*, int> cb, void* opaque);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetCanBlock", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetCanBlock(JSRuntime* rt, int can_block);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetIsHTMLDDA", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetIsHTMLDDA(JSContext* ctx, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetModuleLoaderFunc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetModuleLoaderFunc(JSRuntime* rt, delegate* unmanaged[Cdecl]<JSContext*, byte*, byte*, void*, byte*> module_normalize, delegate* unmanaged[Cdecl]<JSContext*, byte*, void*, JSModuleDef*> module_loader, void* opaque);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetImportMeta", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetImportMeta(JSContext* ctx, JSModuleDef* m);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetModuleName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_GetModuleName(JSContext* ctx, JSModuleDef* m);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_EnqueueJob", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_EnqueueJob(JSContext* ctx, delegate* unmanaged[Cdecl]<JSContext*, int, JSValue*, JSValue> job_func, int argc, JSValue* argv);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_IsJobPending", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_IsJobPending(JSRuntime* rt);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ExecutePendingJob", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_ExecutePendingJob(JSRuntime* rt, JSContext** pctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_WriteObject", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* JS_WriteObject(JSContext* ctx, nuint* psize, JSValue obj, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ReadObject", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ReadObject(JSContext* ctx, byte* buf, nuint buf_len, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ReadObject2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_ReadObject2(JSContext* ctx, byte* buf, nuint buf_len, int flags, nuint* remnants_len);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_ResolveModule", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_ResolveModule(JSContext* ctx, JSValue obj);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetScriptOrModuleName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint JS_GetScriptOrModuleName(JSContext* ctx, int n_stack_levels);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_RunModule", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSModuleDef* JS_RunModule(JSContext* ctx, byte* basename, byte* filename);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetModuleExportItemStr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetModuleExportItemStr(JSContext* ctx, JSModuleDef* m, byte* name);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_GetModuleExportItem", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_GetModuleExportItem(JSContext* ctx, JSModuleDef* m, uint atom);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewCFunction2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewCFunction2(JSContext* ctx, delegate* unmanaged[Cdecl]<JSContext*, JSValue, int, JSValue*, JSValue> func, byte* name, int length, int cproto, int magic);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewCFunctionData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSValue JS_NewCFunctionData(JSContext* ctx, delegate* unmanaged[Cdecl]<JSContext*, JSValue, int, JSValue*, int, JSValue*, JSValue> func, int length, int magic, int data_len, JSValue* data);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetConstructor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetConstructor(JSContext* ctx, JSValue func_obj, JSValue proto);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetPropertyFunctionList", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void JS_SetPropertyFunctionList(JSContext* ctx, JSValue obj, JSCFunctionListEntry* tab, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_NewCModule", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSModuleDef* JS_NewCModule(JSContext* ctx, byte* name_str, delegate* unmanaged[Cdecl]<JSContext*, JSModuleDef*, int> func);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddModuleExport", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_AddModuleExport(JSContext* ctx, JSModuleDef* m, byte* name_str);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_AddModuleExportList", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_AddModuleExportList(JSContext* ctx, JSModuleDef* m, JSCFunctionListEntry* tab, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetModuleExport", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_SetModuleExport(JSContext* ctx, JSModuleDef* m, byte* export_name, JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_JS_SetModuleExportList", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int JS_SetModuleExportList(JSContext* ctx, JSModuleDef* m, JSCFunctionListEntry* tab, int len);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_debugger_get_object_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* js_debugger_get_object_id(JSValue val);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_init_module_std", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSModuleDef* js_init_module_std(JSContext* ctx, byte* module_name);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_init_module_os", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSModuleDef* js_init_module_os(JSContext* ctx, byte* module_name);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_std_add_helpers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_std_add_helpers(JSContext* ctx, int argc, byte** argv);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_std_loop", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_std_loop(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_std_init_handlers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_std_init_handlers(JSRuntime* rt);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_std_free_handlers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_std_free_handlers(JSRuntime* rt);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_std_dump_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_std_dump_error(JSContext* ctx);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_load_file", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* js_load_file(JSContext* ctx, nuint* pbuf_len, byte* filename);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_module_set_import_meta", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int js_module_set_import_meta(JSContext* ctx, JSValue func_val, int use_realpath, int is_main);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_module_loader", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern JSModuleDef* js_module_loader(JSContext* ctx, byte* module_name, void* opaque);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_std_eval_binary", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_std_eval_binary(JSContext* ctx, byte* buf, nuint buf_len, int flags);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_std_promise_rejection_tracker", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_std_promise_rejection_tracker(JSContext* ctx, JSValue promise, JSValue reason, int is_handled, void* opaque);

        [DllImport(__DllName, EntryPoint = "csbindgen_js_std_set_worker_new_context_func", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void js_std_set_worker_new_context_func(delegate* unmanaged[Cdecl]<JSRuntime*, JSContext*> func);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct _iobuf
    {
        public void* _Placeholder;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct _div_t
    {
        public int quot;
        public int rem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct _ldiv_t
    {
        public CLong quot;
        public CLong rem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct _lldiv_t
    {
        public long quot;
        public long rem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSRuntime
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSContext
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct JSValueUnion
    {
        [FieldOffset(0)]
        public int int32;
        [FieldOffset(0)]
        public double float64;
        [FieldOffset(0)]
        public void* ptr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSValue
    {
        public JSValueUnion u;
        public long tag;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSMallocState
    {
        public nuint malloc_count;
        public nuint malloc_size;
        public nuint malloc_limit;
        public void* opaque;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSMallocFunctions
    {
        public delegate* unmanaged[Cdecl]<JSMallocState*, nuint, void*> js_malloc;
        public delegate* unmanaged[Cdecl]<JSMallocState*, void*, void> js_free;
        public delegate* unmanaged[Cdecl]<JSMallocState*, void*, nuint, void*> js_realloc;
        public delegate* unmanaged[Cdecl]<void*, nuint> js_malloc_usable_size;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSGCObjectHeader
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSMemoryUsage
    {
        public long malloc_size;
        public long malloc_limit;
        public long memory_used_size;
        public long malloc_count;
        public long memory_used_count;
        public long atom_count;
        public long atom_size;
        public long str_count;
        public long str_size;
        public long obj_count;
        public long obj_size;
        public long prop_count;
        public long prop_size;
        public long shape_count;
        public long shape_size;
        public long js_func_count;
        public long js_func_size;
        public long js_func_code_size;
        public long js_func_pc2line_count;
        public long js_func_pc2line_size;
        public long c_func_count;
        public long array_count;
        public long fast_array_count;
        public long fast_array_elements;
        public long binary_object_count;
        public long binary_object_size;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSPropertyEnum
    {
        public int is_enumerable;
        public uint atom;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSPropertyDescriptor
    {
        public int flags;
        public JSValue value;
        public JSValue getter;
        public JSValue setter;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSClassExoticMethods
    {
        public delegate* unmanaged[Cdecl]<JSContext*, JSPropertyDescriptor*, JSValue, uint, int> get_own_property;
        public delegate* unmanaged[Cdecl]<JSContext*, JSPropertyEnum**, uint*, JSValue, int> get_own_property_names;
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, uint, int> delete_property;
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, uint, JSValue, JSValue, JSValue, int, int> define_own_property;
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, uint, int> has_property;
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, uint, JSValue, JSValue> get_property;
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, uint, JSValue, JSValue, int, int> set_property;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSClassDef
    {
        public byte* class_name;
        public delegate* unmanaged[Cdecl]<JSRuntime*, JSValue, void> finalizer;
        public delegate* unmanaged[Cdecl]<JSRuntime*, JSValue, delegate* unmanaged[Cdecl]<JSRuntime*, JSGCObjectHeader*, void>, void> gc_mark;
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, JSValue, int, JSValue*, int, JSValue> call;
        public JSClassExoticMethods* exotic;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSSharedArrayBufferFunctions
    {
        public delegate* unmanaged[Cdecl]<void*, nuint, void*> sab_alloc;
        public delegate* unmanaged[Cdecl]<void*, void*, void> sab_free;
        public delegate* unmanaged[Cdecl]<void*, void*, void> sab_dup;
        public void* sab_opaque;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSModuleDef
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct JSCFunctionType
    {
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, int, JSValue*, JSValue> generic;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, int, JSValue*, int, JSValue> generic_magic;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, int, JSValue*, JSValue> constructor;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, int, JSValue*, int, JSValue> constructor_magic;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, int, JSValue*, JSValue> constructor_or_func;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<double, double> f_f;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<double, double, double> f_f_f;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, JSValue> getter;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, JSValue, JSValue> setter;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, int, JSValue> getter_magic;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, JSValue, int, JSValue> setter_magic;
        [FieldOffset(0)]
        public delegate* unmanaged[Cdecl]<JSContext*, JSValue, int, JSValue*, int*, int, JSValue> iterator_next;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSCFunctionListEntry
    {
        public byte* name;
        public byte prop_flags;
        public byte def_type;
        public short magic;
        public JSCFunctionListEntry__bindgen_ty_1 u;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe partial struct JSCFunctionListEntry__bindgen_ty_1
    {
        [FieldOffset(0)]
        public JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1 func;
        [FieldOffset(0)]
        public JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2 getset;
        [FieldOffset(0)]
        public JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3 alias;
        [FieldOffset(0)]
        public JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4 prop_list;
        [FieldOffset(0)]
        public byte* str_;
        [FieldOffset(0)]
        public int i32_;
        [FieldOffset(0)]
        public long i64_;
        [FieldOffset(0)]
        public double f64_;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_1
    {
        public byte length;
        public byte cproto;
        public JSCFunctionType cfunc;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_2
    {
        public JSCFunctionType get;
        public JSCFunctionType set;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_3
    {
        public byte* name;
        public int @base;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe partial struct JSCFunctionListEntry__bindgen_ty_1__bindgen_ty_4
    {
        public JSCFunctionListEntry* tab;
        public int len;
    }



}
    